==== src/app/head.tsx ====
export default function Head() {
  return (
    <>
      <meta charSet="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
    </>
  );
}

==== src/app/layout.tsx ====
import Footer from "@/components/Footer";
import type { Metadata } from "next";
import "./globals.css";

export const metadata: Metadata = {
  title: "Sistema FETRAF",
  description: "FederaÃ§Ã£o dos Trabalhadores do Ramo Financeiro do RJ e ES",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="pt-BR">
      <body className="font-sans antialiased bg-background text-foreground">
        {children}
      </body>
    </html>
  );
}

==== src/app/page.tsx ====
import { redirect } from "next/navigation";
export default function Home() {
  redirect("/login");
}

==== src/app/api/auth/login/route.ts ====
import { NextRequest, NextResponse } from "next/server";


const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";
const LOGIN_PATH = process.env.FETRAF_AUTH_LOGIN_PATH || "/auth/login";


async function tryFetch(url: string, init: RequestInit) {
const res = await fetch(url, init);
let body: any = null;
try { body = await res.clone().json(); } catch { try { body = await res.text(); } catch {} }
return { ok: res.ok, status: res.status, body };
}


function extractToken(data: any): string | null {
return (
data?.token?.token ||
data?.token ||
data?.access_token ||
data?.jwt ||
data?.data?.token ||
null
);
}


export async function POST(req: NextRequest) {
try {
let payload = {} as any;
try { payload = await req.json(); } catch {}


const email = payload.email ?? payload.uid ?? "";
const password = payload.password ?? "";


const candidates: Array<RequestInit> = [
{
method: "POST",
headers: { "Content-Type": "application/json" },
body: JSON.stringify({ email, password }),
},
{
method: "POST",
headers: { "Content-Type": "application/json" },
body: JSON.stringify({ uid: email, password }),
},
{
method: "POST",
headers: { "Content-Type": "application/x-www-form-urlencoded" },
body: new URLSearchParams({ email, password }).toString(),
},
{
method: "POST",
headers: { "Content-Type": "application/x-www-form-urlencoded" },
body: new URLSearchParams({ uid: email, password }).toString(),
},
];


let last: any = null;
for (const init of candidates) {
const { ok, status, body } = await tryFetch(`${API}${LOGIN_PATH}`, init);
last = { status, body };
if (!ok) continue;
const token = extractToken(body);
if (!token) continue;
const res = NextResponse.json({ ok: true });
res.cookies.set("auth_token", token, {
httpOnly: true,
sameSite: "lax",
secure: process.env.NODE_ENV === "production",
path: "/",
maxAge: 60 * 60 * 8,
});
return res;
}


return NextResponse.json(
{ ok: false, error: "Credenciais inválidas ou API rejeitou o login", detail: last },
{ status: 401 }
);
} catch (e: any) {
return NextResponse.json({ ok: false, error: e?.message || "Erro" }, { status: 400 });
}
}

==== src/app/api/auth/logout/route.ts ====
import { NextResponse } from "next/server";
export async function POST() {
const res = NextResponse.json({ ok: true });
res.cookies.set("auth_token", "", { httpOnly: true, path: "/", maxAge: 0 });
return res;
}

==== src/app/api/auth/me/route.ts ====
import { NextRequest, NextResponse } from "next/server";


export async function GET(req: NextRequest) {
const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";
const token = req.cookies.get("auth_token")?.value;
if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });
const r = await fetch(`${API}/auth/me`, { headers: { Authorization: `Bearer ${token}` } });
const body = await r.text();
return new NextResponse(body, { status: r.status });
}

==== src/app/api/contribuicoes/route.ts ====
import { NextRequest, NextResponse } from "next/server";

const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

export async function GET(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const qs = new URL(req.url).search;
  const r = await fetch(`${API}/contribuicoes${qs}`, {
    headers: { Authorization: `Bearer ${token}` },
  });

  const text = await r.text();
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

export async function POST(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/contribuicoes`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body,
  });

  const text = await r.text();
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}


==== src/app/api/contribuicoes/[id]/route.ts ====
import { NextRequest, NextResponse } from "next/server";

const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

function toResponse(r: Response, text: string) {
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

// 🔧 Next 15: o segundo argumento agora tipa params como Promise<...>
// Precisamos "await" para extrair o id
export async function GET(
  req: NextRequest,
  ctx: { params: Promise<{ id: string }> }
) {
  const { id } = await ctx.params;
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const r = await fetch(`${API}/contribuicoes/${id}`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function PATCH(
  req: NextRequest,
  ctx: { params: Promise<{ id: string }> }
) {
  const { id } = await ctx.params;
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/contribuicoes/${id}`, {
    method: "PATCH",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body,
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function PUT(
  req: NextRequest,
  ctx: { params: Promise<{ id: string }> }
) {
  const { id } = await ctx.params;
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/contribuicoes/${id}`, {
    method: "PUT",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body,
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function DELETE(
  req: NextRequest,
  ctx: { params: Promise<{ id: string }> }
) {
  const { id } = await ctx.params;
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const r = await fetch(`${API}/contribuicoes/${id}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` },
  });
  const text = await r.text();
  return toResponse(r, text);
}


==== src/app/api/filiados/route.ts ====
import { NextRequest, NextResponse } from "next/server";

const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

export async function GET(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const qs = new URL(req.url).search;
  const r = await fetch(`${API}/filiados${qs}`, {
    headers: { Authorization: `Bearer ${token}` },
  });

  const text = await r.text();
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

export async function POST(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text(); // repassa como vier
  const r = await fetch(`${API}/filiados`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body,
  });

  const text = await r.text();
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}


==== src/app/api/filiados/[id]/route.ts ====
import { NextRequest, NextResponse } from "next/server";
const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

function toResponse(r: Response, text: string) {
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

export async function GET(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const r = await fetch(`${API}/filiados/${params.id}`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/filiados/${params.id}`, {
    method: "PATCH",
    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
    body,
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function PUT(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/filiados/${params.id}`, {
    method: "PUT",
    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
    body,
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const r = await fetch(`${API}/filiados/${params.id}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` },
  });
  const text = await r.text();
  return toResponse(r, text);
}


==== src/app/api/relatorios/route.ts ====
import { NextRequest, NextResponse } from "next/server";
const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

export async function GET(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const qs = new URL(req.url).search;
  const r = await fetch(`${API}/relatorios${qs}`, {
    headers: { Authorization: `Bearer ${token}` },
  });

  const text = await r.text();
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

export async function POST(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/relatorios`, {
    method: "POST",
    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
    body,
  });

  const text = await r.text();
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}


==== src/app/api/relatorios/[id]/route.ts ====
import { NextRequest, NextResponse } from "next/server";
const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

function toResponse(r: Response, text: string) {
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

export async function GET(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const r = await fetch(`${API}/relatorios/${params.id}`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/relatorios/${params.id}`, {
    method: "PATCH",
    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
    body,
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function PUT(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/relatorios/${params.id}`, {
    method: "PUT",
    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
    body,
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const r = await fetch(`${API}/relatorios/${params.id}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` },
  });
  const text = await r.text();
  return toResponse(r, text);
}


==== src/app/api/relatorios/[id]/download/route.ts ====
import { NextRequest } from "next/server";
const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

export async function GET(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return new Response(JSON.stringify({ ok: false, error: "sem token" }), {
    status: 401, headers: { "content-type": "application/json" }
  });

  const url = new URL(req.url);
  const format = url.searchParams.get("format") || "csv";
  const upstream = await fetch(`${API}/relatorios/${params.id}/download?format=${format}`, {
    headers: { Authorization: `Bearer ${token}` },
  });

  // Passa o corpo como stream e preserva content-type/disposition
  const headers = new Headers();
  const ct = upstream.headers.get("content-type");
  const cd = upstream.headers.get("content-disposition") || `attachment; filename="relatorio-${params.id}.${format}"`;
  if (ct) headers.set("content-type", ct);
  headers.set("content-disposition", cd);

  return new Response(upstream.body, { status: upstream.status, headers });
}


==== src/app/api/settings/route.ts ====
import { NextRequest, NextResponse } from "next/server";

const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

function asResponse(r: Response, text: string) {
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

export async function GET(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const r = await fetch(`${API}/settings`, { headers: { Authorization: `Bearer ${token}` } });
  const text = await r.text();
  return asResponse(r, text);
}

export async function PATCH(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/settings`, {
    method: "PATCH",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body,
  });
  const text = await r.text();
  return asResponse(r, text);
}


==== src/app/api/sindicatos/route.ts ====
import { NextRequest, NextResponse } from "next/server";

const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

export async function GET(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const qs = new URL(req.url).search;
  const r = await fetch(`${API}/sindicatos${qs}`, {
    headers: { Authorization: `Bearer ${token}` },
  });

  const text = await r.text();
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

export async function POST(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text(); // repassa como vier
  const r = await fetch(`${API}/sindicatos`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body,
  });

  const text = await r.text();
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}



==== src/app/api/sindicatos/[id]/route.ts ====
import { NextRequest, NextResponse } from "next/server";
const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

function toResponse(r: Response, text: string) {
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

export async function GET(_req: NextRequest, { params }: { params: { id: string } }) {
  const token = _req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const r = await fetch(`${API}/sindicatos/${params.id}`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/sindicatos/${params.id}`, {
    method: "PATCH",
    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
    body,
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function PUT(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const body = await req.text();
  const r = await fetch(`${API}/sindicatos/${params.id}`, {
    method: "PUT",
    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
    body,
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok: false, error: "sem token" }, { status: 401 });

  const r = await fetch(`${API}/sindicatos/${params.id}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` },
  });
  const text = await r.text();
  return toResponse(r, text);
}


==== src/app/api/sindicatos/[id]/editar/page.tsx ====
"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { apiFetch } from "@/lib/api";

type Form = {
  nome: string;
  cnpj: string;
  cidade: string;
  uf: string;
  email: string;
  telefone: string;
  endereco: string;
};

export default function EditSindicatoPage() {
  const { id } = useParams<{ id: string }>();
  const router = useRouter();
  const [form, setForm] = useState<Form | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [ok, setOk] = useState<string | null>(null);

  useEffect(() => {
    (async () => {
      try {
        const res = await apiFetch(`/api/sindicatos/${id}`);
        const body = await res.json().catch(async () => ({ raw: await res.text() }));
        const s = body.data ?? body;
        const initial: Form = {
          nome: s.nome ?? "",
          cnpj: s.cnpj ?? "",
          cidade: s.cidade ?? "",
          uf: s.uf ?? "",
          email: s.email ?? "",
          telefone: s.telefone ?? "",
          endereco: s.endereco ?? "",
        };
        setForm(initial);
      } catch (e: any) {
        setErr(e.message);
      } finally {
        setLoading(false);
      }
    })();
  }, [id]);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!form) return;
    setErr(null);
    setOk(null);
    setSaving(true);
    try {
      const res = await fetch(`/api/sindicatos/${id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });
      const text = await res.text();
      let data: any = null;
      try { data = JSON.parse(text); } catch { data = { raw: text }; }
      if (!res.ok) throw new Error(data?.error || data?.message || data?.raw || `HTTP ${res.status}`);
      setOk("Alterações salvas.");
      router.push(`/dashboard/sindicatos/${id}`);
    } catch (e: any) {
      setErr(e.message);
    } finally {
      setSaving(false);
    }
  }

  if (loading) return <div className="p-4 text-sm text-neutral-500">Carregando…</div>;
  if (!form) return <div className="p-4">Sindicato não encontrado.</div>;

  return (
    <div className="max-w-2xl space-y-4">
      <h1 className="text-lg font-semibold">Editar Sindicato #{id}</h1>

      <form onSubmit={onSubmit} className="rounded-2xl border border-neutral-200 dark:border-neutral-800 p-4 space-y-3">
        <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
          <input className="rounded-xl border px-3 py-2" placeholder="Nome"
                 value={form.nome} onChange={(e)=>setForm(f=>({...f!, nome:e.target.value}))} />
          <input className="rounded-xl border px-3 py-2" placeholder="CNPJ"
                 value={form.cnpj} onChange={(e)=>setForm(f=>({...f!, cnpj:e.target.value}))} />
          <input className="rounded-xl border px-3 py-2" placeholder="Cidade"
                 value={form.cidade} onChange={(e)=>setForm(f=>({...f!, cidade:e.target.value}))} />
          <input className="rounded-xl border px-3 py-2" placeholder="UF"
                 value={form.uf} onChange={(e)=>setForm(f=>({...f!, uf:e.target.value.toUpperCase().slice(0,2)}))} />
          <input className="rounded-xl border px-3 py-2" placeholder="E-mail"
                 value={form.email} onChange={(e)=>setForm(f=>({...f!, email:e.target.value}))} />
          <input className="rounded-xl border px-3 py-2" placeholder="Telefone"
                 value={form.telefone} onChange={(e)=>setForm(f=>({...f!, telefone:e.target.value}))} />
        </div>

        <input className="w-full rounded-xl border px-3 py-2" placeholder="Endereço"
               value={form.endereco} onChange={(e)=>setForm(f=>({...f!, endereco:e.target.value}))} />

        {err && <p className="text-sm text-rose-500">{err}</p>}
        {ok && <p className="text-sm text-emerald-600">{ok}</p>}

        <div className="flex gap-2">
          <button disabled={saving} className="rounded-xl border px-3 py-2 text-sm">
            {saving ? "Salvando..." : "Salvar"}
          </button>
          <a href={`/dashboard/sindicatos/${id}`} className="rounded-xl border px-3 py-2 text-sm">Cancelar</a>
        </div>
      </form>
    </div>
  );
}


==== src/app/api/usuarios/route.ts ====
import { NextRequest, NextResponse } from "next/server";
const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

function toResponse(r: Response, text: string) {
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

export async function GET(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok:false, error:"sem token" }, { status:401 });
  const qs = new URL(req.url).search;
  const r = await fetch(`${API}/usuarios${qs}`, { headers:{ Authorization:`Bearer ${token}` }});
  const text = await r.text();
  return toResponse(r, text);
}

export async function POST(req: NextRequest) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok:false, error:"sem token" }, { status:401 });
  const body = await req.text();
  const r = await fetch(`${API}/usuarios`, {
    method:"POST",
    headers:{ Authorization:`Bearer ${token}`, "Content-Type":"application/json" },
    body
  });
  const text = await r.text();
  return toResponse(r, text);
}


==== src/app/api/usuarios/[id]/route.ts ====
import { NextRequest, NextResponse } from "next/server";
const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

function toResponse(r: Response, text: string) {
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type": "application/json" } : undefined,
  });
}

export async function GET(req: NextRequest, { params }: { params:{ id:string }}) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok:false, error:"sem token" }, { status:401 });
  const r = await fetch(`${API}/usuarios/${params.id}`, { headers:{ Authorization:`Bearer ${token}` }});
  const text = await r.text();
  return toResponse(r, text);
}

export async function PATCH(req: NextRequest, { params }: { params:{ id:string }}) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok:false, error:"sem token" }, { status:401 });
  const body = await req.text();
  const r = await fetch(`${API}/usuarios/${params.id}`, {
    method:"PATCH",
    headers:{ Authorization:`Bearer ${token}`, "Content-Type":"application/json" },
    body
  });
  const text = await r.text();
  return toResponse(r, text);
}

export async function DELETE(req: NextRequest, { params }: { params:{ id:string }}) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok:false, error:"sem token" }, { status:401 });
  const r = await fetch(`${API}/usuarios/${params.id}`, {
    method:"DELETE",
    headers:{ Authorization:`Bearer ${token}` }
  });
  const text = await r.text();
  return toResponse(r, text);
}


==== src/app/api/usuarios/[id]/reset/route.ts ====
import { NextRequest, NextResponse } from "next/server";
const API = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333";

export async function POST(req: NextRequest, { params }: { params:{ id:string }}) {
  const token = req.cookies.get("auth_token")?.value;
  if (!token) return NextResponse.json({ ok:false, error:"sem token" }, { status:401 });
  const r = await fetch(`${API}/usuarios/${params.id}/reset`, {
    method:"POST",
    headers:{ Authorization:`Bearer ${token}` }
  });
  const text = await r.text();
  const isJson = (r.headers.get("content-type") || "").includes("application/json");
  return new NextResponse(isJson ? text : JSON.stringify({ raw: text }), {
    status: r.status,
    headers: isJson ? { "content-type":"application/json" } : undefined
  });
}


==== src/app/dashboard/layout.tsx ====
import type { ReactNode } from "react";
import ClientShell from "@/components/dashboard/ClientShell"; // client component permitido aqui

export default function Layout({ children }: { children: ReactNode }) {
  return <ClientShell>{children}</ClientShell>;
}

==== src/app/dashboard/page.tsx ====
"use client";

import Link from "next/link";
import { useEffect, useMemo, useState } from "react";
import PageLayout from "@/components/PageLayout";
import { PageHeader } from "@/components/PageHeader";
import { apiFetch } from "@/lib/api";

/** Tipos (ajuste aos seus campos) */
type Kpis = {
  totalFiliados: number;
  ativos: number;
  inadimplentes: number;
  contribMesQtd: number;
  contribMesValor: number;
  ticketMedio?: number;
};
type UltimoFiliado = { id: string | number; nome: string; cpf?: string; criadoEm?: string; status?: string };
type UltimaContrib = { id: string | number; filiadoId?: string | number; filiado?: string; competencia?: string; valor?: number; status?: string; criadoEm?: string };
type SerieMes = { label: string; valor: number }; // ex.: [{ label: "Mai/25", valor: 1234 }]

function money(v?: number) {
  return v == null ? "â€“" : v.toLocaleString("pt-BR", { style: "currency", currency: "BRL" });
}

/** ===== Mini grÃ¡fico de barras (SVG, responsivo) ===== */
function MiniBarChart({ data, height = 120 }: { data: SerieMes[]; height?: number }) {
  const max = Math.max(1, ...data.map((d) => d.valor || 0));
  const barW = 28; // largura de cada barra
  const gap = 12;  // espaÃ§amento entre barras
  const w = data.length * barW + (data.length - 1) * gap;
  const h = height;
  const base = h - 24; // deixa espaÃ§o para labels

  return (
    <svg viewBox={`0 0 ${w} ${h}`} className="w-full h-[140px]" aria-label="ContribuiÃ§Ãµes - Ãºltimos meses">
      {/* eixo base */}
      <line x1={0} y1={base} x2={w} y2={base} stroke="currentColor" className="opacity-20" />
      {data.map((d, i) => {
        const x = i * (barW + gap);
        const barH = max ? Math.max(2, Math.round((d.valor / max) * (base - 8))) : 2;
        const y = base - barH;
        return (
          <g key={i} transform={`translate(${x},0)`}>
            {/* barra */}
            <rect
              x={0}
              y={y}
              width={barW}
              height={barH}
              rx={6}
              className="fill-[var(--brand)]/80 hover:fill-[var(--brand)] transition"
            >
              <title>{`${d.label}: ${money(d.valor)}`}</title>
            </rect>
            {/* valor (minitexto) */}
            <text
              x={barW / 2}
              y={y - 4}
              textAnchor="middle"
              className="fill-current text-[10px] opacity-70"
            >
              {d.valor?.toLocaleString("pt-BR")}
            </text>
            {/* label mÃªs */}
            <text
              x={barW / 2}
              y={h - 6}
              textAnchor="middle"
              className="fill-current text-[10px] opacity-60"
            >
              {d.label}
            </text>
          </g>
        );
      })}
    </svg>
  );
}

export default function DashboardHome() {
  const [kpis, setKpis] = useState<Kpis | null>(null);
  const [topLoading, setTopLoading] = useState(true);
  const [topErr, setTopErr] = useState<string | null>(null);

  const [ultFiliados, setUltFiliados] = useState<UltimoFiliado[]>([]);
  const [ultContribs, setUltContribs] = useState<UltimaContrib[]>([]);
  const [listsLoading, setListsLoading] = useState(true);
  const [listsErr, setListsErr] = useState<string | null>(null);

  // SÃ©rie do grÃ¡fico
  const [serie, setSerie] = useState<SerieMes[] | null>(null);
  const [serieErr, setSerieErr] = useState<string | null>(null);

  /** Endpoints sugeridos (ajuste se necessÃ¡rio) */
  const kpiUrl = useMemo(() => `/api/dashboard/summary`, []);
  const ultFiliadosUrl = useMemo(() => `/api/filiados?sort=criadoEm&dir=desc&limit=8`, []);
  const ultContribsUrl = useMemo(() => `/api/contribuicoes?sort=criadoEm&dir=desc&limit=8`, []);
  // Endpoint da sÃ©rie (ajuste ao seu backend). Esperado: array simples ou {data: []}
  const serieUrl = useMemo(() => `/api/contribuicoes/series?months=6&group=mes`, []);

  /** KPIs / cards superiores */
  useEffect(() => {
    let alive = true;
    (async () => {
      setTopLoading(true);
      setTopErr(null);
      try {
        const res = await apiFetch(kpiUrl);
        const txt = await res.text();
        let body: any; try { body = JSON.parse(txt); } catch { body = { raw: txt }; }
        const s: Kpis = body?.data ?? body ?? {};
        if (!alive) return;
        setKpis({
          totalFiliados: Number(s.totalFiliados ?? 0),
          ativos: Number(s.ativos ?? 0),
          inadimplentes: Number(s.inadimplentes ?? 0),
          contribMesQtd: Number(s.contribMesQtd ?? 0),
          contribMesValor: Number(s.contribMesValor ?? 0),
          ticketMedio: s.ticketMedio ?? (Number(s.contribMesQtd) ? Number(s.contribMesValor) / Number(s.contribMesQtd) : undefined),
        });
      } catch (e: any) {
        if (!alive) return;
        setTopErr(e.message ?? "Falha ao carregar resumo.");
      } finally {
        if (!alive) return;
        setTopLoading(false);
      }
    })();
    return () => { alive = false; };
  }, [kpiUrl]);

  /** Listas inferiores (Ãºltimos cadastros e contribuiÃ§Ãµes) */
  useEffect(() => {
    let alive = true;
    (async () => {
      setListsLoading(true);
      setListsErr(null);
      try {
        const [rf, rc] = await Promise.all([apiFetch(ultFiliadosUrl), apiFetch(ultContribsUrl)]);
        const [tf, tc] = await Promise.all([rf.text(), rc.text()]);
        let bf: any; try { bf = JSON.parse(tf); } catch { bf = { raw: tf }; }
        let bc: any; try { bc = JSON.parse(tc); } catch { bc = { raw: tc }; }

        const lf: UltimoFiliado[] =
          (Array.isArray(bf) && bf) || bf?.data || bf?.items || [];
        const lc: UltimaContrib[] =
          (Array.isArray(bc) && bc) || bc?.data || bc?.items || [];

        if (!alive) return;
        setUltFiliados(lf);
        setUltContribs(lc);
      } catch (e: any) {
        if (!alive) return;
        setListsErr(e.message ?? "Falha ao carregar listas.");
      } finally {
        if (!alive) return;
        setListsLoading(false);
      }
    })();
    return () => { alive = false; };
  }, [ultFiliadosUrl, ultContribsUrl]);

  /** SÃ©rie do grÃ¡fico (Ãºltimos 6 meses) */
  useEffect(() => {
    let alive = true;
    (async () => {
      setSerieErr(null);
      try {
        const res = await apiFetch(serieUrl);
        const txt = await res.text();
        let body: any; try { body = JSON.parse(txt); } catch { body = { raw: txt }; }
        const arr: any[] = (Array.isArray(body) && body) || body?.data || body?.items || [];

        // Normaliza possÃ­veis formatos de backend:
        // aceita { mes: "2025-05", totalValor: 123 }, { label, valor }, etc.
        const norm: SerieMes[] = arr.map((it) => {
          const rawLabel: string =
            it.label ??
            it.mes ??
            it.month ??
            it.periodo ??
            it.period ??
            "";
          const label =
            rawLabel && /^\d{4}-\d{2}/.test(rawLabel)
              ? new Date(rawLabel + "-01T00:00:00").toLocaleDateString("pt-BR", { month: "short" }).replace(".", "") + "/" + new Date(rawLabel + "-01T00:00:00").getFullYear().toString().slice(-2)
              : (rawLabel || "");
          const valor: number =
            Number(it.valor ?? it.total ?? it.totalValor ?? it.sum ?? 0);
          return { label, valor };
        });

        if (!alive) return;
        setSerie(norm);
      } catch (e: any) {
        if (!alive) return;
        setSerieErr(e.message ?? "Falha ao carregar sÃ©rie.");
      }
    })();
    return () => { alive = false; };
  }, [serieUrl]);

  return (
    <PageLayout>
      <PageHeader
        title="VisÃ£o geral"
        subtitle="Resumo operacional do Sistema FETRAF"
        actions={
          <div className="flex items-center gap-2">
            <Link href="/dashboard/filiados/novo" className="btn btn-brand">Novo Filiado</Link>
            <Link href="/dashboard/contribuicoes/nova" className="btn">Nova ContribuiÃ§Ã£o</Link>
          </div>
        }
      />

      {/* KPIs */}
      <section className="grid gap-4 md:grid-cols-2 xl:grid-cols-4">
        <KpiCard
          title="Filiados"
          value={topLoading ? "â€¦" : kpis?.totalFiliados?.toLocaleString("pt-BR") ?? "0"}
          foot={topErr ? topErr : `Ativos: ${kpis?.ativos ?? 0}`}
          href="/dashboard/filiados"
        />
        <KpiCard
          title="Inadimplentes"
          value={topLoading ? "â€¦" : (kpis?.inadimplentes ?? 0).toLocaleString("pt-BR")}
          foot="Nos Ãºltimos 12 meses"
          href="/dashboard/filiados?q=status:inadimplente"
        />
        <KpiCard
          title="ContribuiÃ§Ãµes (mÃªs)"
          value={topLoading ? "â€¦" : (kpis?.contribMesQtd ?? 0).toLocaleString("pt-BR")}
          foot={money(kpis?.contribMesValor)}
          href="/dashboard/contribuicoes"
        />
        <KpiCard
          title="Ticket mÃ©dio"
          value={topLoading ? "â€¦" : money(kpis?.ticketMedio)}
          foot="Valor mÃ©dio por contribuiÃ§Ã£o"
          href="/dashboard/relatorios"
        />
      </section>

      {/* Mini grÃ¡fico */}
      <section className="mt-4 grid gap-4 xl:grid-cols-3">
        <div className="card xl:col-span-2">
          <div className="flex items-center justify-between">
            <h3 className="font-medium">ContribuiÃ§Ãµes â€” Ãºltimos 6 meses</h3>
            {serieErr && <span className="text-xs text-rose-500">{serieErr}</span>}
          </div>
          <p className="mt-1 text-xs muted">
            Soma mensal (R$). Passe o mouse nas barras para ver os valores.
          </p>
          <div className="mt-2">
            {serie?.length ? (
              <MiniBarChart data={serie} />
            ) : (
              <div className="text-sm muted">Carregando sÃ©rieâ€¦</div>
            )}
          </div>
        </div>

        {/* Pequeno resumo ao lado do grÃ¡fico (facultativo) */}
        <div className="card space-y-2">
          <h4 className="font-medium">Resumo rÃ¡pido</h4>
          <ul className="text-sm space-y-1">
            <li className="flex justify-between">
              <span className="muted">MÃ©dia mensal</span>
              <span>
                {serie && serie.length
                  ? money(
                      Math.round(
                        (serie.reduce((s, p) => s + (p.valor || 0), 0) / serie.length) * 100
                      ) / 100
                    )
                  : "â€“"}
              </span>
            </li>
            <li className="flex justify-between">
              <span className="muted">Maior mÃªs</span>
              <span>
                {serie && serie.length
                  ? (() => {
                      const top = [...serie].sort((a, b) => b.valor - a.valor)[0];
                      return `${top.label} Â· ${money(top.valor)}`;
                    })()
                  : "â€“"}
              </span>
            </li>
            <li className="flex justify-between">
              <span className="muted">Menor mÃªs</span>
              <span>
                {serie && serie.length
                  ? (() => {
                      const low = [...serie].sort((a, b) => a.valor - b.valor)[0];
                      return `${low.label} Â· ${money(low.valor)}`;
                    })()
                  : "â€“"}
              </span>
            </li>
          </ul>
        </div>
      </section>

      {/* Tabelas rÃ¡pidas */}
      <section className="mt-4 grid gap-4 lg:grid-cols-2">
        {/* Ãšltimos filiados */}
        <div className="card p-0 overflow-hidden">
          <div className="flex items-center justify-between px-4 py-3">
            <h3 className="font-medium">Ãšltimos filiados</h3>
            <Link href="/dashboard/filiados" className="text-sm hover:underline">ver todos</Link>
          </div>
          {listsLoading ? (
            <div className="px-4 pb-4 text-sm muted">Carregandoâ€¦</div>
          ) : listsErr ? (
            <div className="px-4 pb-4 text-sm text-rose-500">Erro: {listsErr}</div>
          ) : ultFiliados.length === 0 ? (
            <div className="px-4 pb-4 text-sm muted">Sem cadastros recentes.</div>
          ) : (
            <table className="w-full text-sm">
              <thead className="bg-neutral-50 dark:bg-neutral-800/50">
                <tr>
                  <th className="px-3 py-2 text-left font-medium">Nome</th>
                  <th className="px-3 py-2 text-left font-medium">CPF</th>
                  <th className="px-3 py-2 text-left font-medium">Status</th>
                  <th className="px-3 py-2 text-left font-medium">Criado em</th>
                </tr>
              </thead>
              <tbody>
                {ultFiliados.map((f) => (
                  <tr key={f.id} className="border-t border-[var(--border)]">
                    <td className="px-3 py-2">
                      <a className="hover:underline" href={`/dashboard/filiados/${f.id}`}>{f.nome}</a>
                    </td>
                    <td className="px-3 py-2">{f.cpf ?? "-"}</td>
                    <td className="px-3 py-2">
                      <span className="chip">{f.status ?? "-"}</span>
                    </td>
                    <td className="px-3 py-2 text-neutral-500">
                      {f.criadoEm ? new Date(f.criadoEm).toLocaleString() : "-"}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>

        {/* Ãšltimas contribuiÃ§Ãµes */}
        <div className="card p-0 overflow-hidden">
          <div className="flex items-center justify-between px-4 py-3">
            <h3 className="font-medium">Ãšltimas contribuiÃ§Ãµes</h3>
            <Link href="/dashboard/contribuicoes" className="text-sm hover:underline">ver todas</Link>
          </div>
          {listsLoading ? (
            <div className="px-4 pb-4 text-sm muted">Carregandoâ€¦</div>
          ) : listsErr ? (
            <div className="px-4 pb-4 text-sm text-rose-500">Erro: {listsErr}</div>
          ) : ultContribs.length === 0 ? (
            <div className="px-4 pb-4 text-sm muted">Sem lanÃ§amentos recentes.</div>
          ) : (
            <table className="w-full text-sm">
              <thead className="bg-neutral-50 dark:bg-neutral-800/50">
                <tr>
                  <th className="px-3 py-2 text-left font-medium">Filiado</th>
                  <th className="px-3 py-2 text-left font-medium">CompetÃªncia</th>
                  <th className="px-3 py-2 text-left font-medium">Valor</th>
                  <th className="px-3 py-2 text-left font-medium">Status</th>
                  <th className="px-3 py-2 text-left font-medium">Criado em</th>
                </tr>
              </thead>
              <tbody>
                {ultContribs.map((c) => (
                  <tr key={c.id} className="border-t border-[var(--border)]">
                    <td className="px-3 py-2">
                      {c.filiadoId ? (
                        <a className="hover:underline" href={`/dashboard/filiados/${c.filiadoId}?tab=contribuicoes`}>
                          {c.filiado ?? c.filiadoId}
                        </a>
                      ) : (
                        c.filiado ?? "-"
                      )}
                    </td>
                    <td className="px-3 py-2">{c.competencia ?? "-"}</td>
                    <td className="px-3 py-2">{money(c.valor)}</td>
                    <td className="px-3 py-2"><span className="chip">{c.status ?? "-"}</span></td>
                    <td className="px-3 py-2 text-neutral-500">
                      {c.criadoEm ? new Date(c.criadoEm).toLocaleString() : "-"}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </section>
    </PageLayout>
  );
}

/** ===== Componente de KPI ===== */
function KpiCard({ title, value, foot, href }: { title: string; value: string; foot?: string; href?: string }) {
  const content = (
    <div className="card">
      <p className="text-xs muted">{title}</p>
      <p className="mt-1 text-2xl font-semibold">{value}</p>
      {foot && <p className="mt-1 text-xs text-neutral-500 dark:text-neutral-400">{foot}</p>}
    </div>
  );
  return href ? (
    <a href={href} className="block transition hover:-translate-y-0.5">{content}</a>
  ) : content;
}





==== src/app/dashboard/configuracoes/page.tsx ====
// src/app/dashboard/configuracoes/page.tsx
import { Suspense } from "react";
import ConfiguracoesClient from "./Client";

export const metadata = {
  title: "Configurações — FETRAF",
};

export default function Page() {
  return (
    <Suspense
      fallback={
        <div className="card p-6 text-sm text-[var(--muted)]">Carregando…</div>
      }
    >
      <ConfiguracoesClient />
    </Suspense>
  );
}


==== src/app/dashboard/configuracoes/usuarios/page.tsx ====
// src/app/dashboard/usuarios/page.tsx
import { Suspense } from "react";
import UsuariosClient from "./Client";

export const metadata = {
  title: "Usuários — FETRAF",
};

export default function Page() {
  return (
    <Suspense
      fallback={
        <div className="card p-6 text-sm text-[var(--muted)]">Carregando…</div>
      }
    >
      <UsuariosClient />
    </Suspense>
  );
}


==== src/app/dashboard/configuracoes/usuarios/novo/page.tsx ====
// src/app/dashboard/configuracoes/usuarios/novo/page.tsx
import { Suspense } from "react";
import NovoUsuarioClient from "./Client";

export const metadata = {
  title: "Novo usuário — FETRAF",
  description: "Criar um novo usuário no sistema FETRAF",
};

// (Opcional) defina viewport no lado do servidor, NUNCA em Client
export const viewport = {
  themeColor: "#111827",
};

export default function Page() {
  return (
    <Suspense fallback={<div className="p-6 text-sm">Carregando…</div>}>
      <NovoUsuarioClient />
    </Suspense>
  );
}


==== src/app/dashboard/configuracoes/usuarios/[id]/page.tsx ====
"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import PageLayout from "@/components/PageLayout";
import { PageHeader } from "@/components/PageHeader";
import { apiFetch } from "@/lib/api";

type User = {
  id: string | number;
  nome: string;
  email: string;
  role?: "admin" | "financeiro" | "analista" | string;
  ativo?: boolean;
  criadoEm?: string;
};

export default function UsuarioEditPage() {
  const router = useRouter();
  const params = useParams<{ id: string }>();
  const id = params?.id;

  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [msg, setMsg] = useState<string | null>(null);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        setErr(null);
        const res = await apiFetch(`/api/usuarios/${id}`);
        const text = await res.text();
        let body: any;
        try {
          body = JSON.parse(text);
        } catch {
          body = { raw: text };
        }
        const u: User = body?.data ?? body ?? null;
        if (!alive) return;
        setUser(u);
      } catch (e: any) {
        if (!alive) return;
        setErr(e.message ?? "Falha ao carregar usuário.");
      } finally {
        if (!alive) return;
        setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [id]);

  async function patch(payload: Partial<User>) {
    setErr(null);
    setMsg(null);
    setSaving(true);
    try {
      const res = await fetch(`/api/usuarios/${id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const txt = await res.text();
      let body: any;
      try {
        body = JSON.parse(txt);
      } catch {
        body = { raw: txt };
      }
      if (!res.ok) throw new Error(body?.error || body?.message || body?.raw || `HTTP ${res.status}`);
      setMsg("Alterações salvas.");
      setUser((u) => (u ? ({ ...u, ...payload } as User) : u));
    } catch (e: any) {
      setErr(e.message);
    } finally {
      setSaving(false);
    }
  }

  async function toggleAtivo() {
    if (!user) return;
    await patch({ ativo: !user.ativo });
  }

  async function removeUser() {
    if (!confirm("Tem certeza que deseja excluir este usuário?")) return;
    setErr(null);
    setMsg(null);
    setSaving(true);
    try {
      const res = await fetch(`/api/usuarios/${id}`, { method: "DELETE" });
      if (!res.ok) {
        const t = await res.text();
        let b: any;
        try {
          b = JSON.parse(t);
        } catch {
          b = { raw: t };
        }
        throw new Error(b?.error || b?.message || b?.raw || `HTTP ${res.status}`);
      }
      router.push("/dashboard/configuracoes?tab=usuarios");
    } catch (e: any) {
      setErr(e.message);
    } finally {
      setSaving(false);
    }
  }

  if (loading) {
    return (
      <PageLayout>
        <div className="card p-6 text-sm muted">Carregando…</div>
      </PageLayout>
    );
  }
  if (!user) {
    return (
      <PageLayout>
        <div className="card p-6">Usuário não encontrado.</div>
      </PageLayout>
    );
  }

  return (
    <PageLayout>
      <PageHeader
        title={user.nome || "Usuário"}
        subtitle={user.email}
        actions={
          <div className="flex items-center gap-2">
            <button className="btn" onClick={() => router.back()}>Voltar</button>
            <button className="btn" onClick={toggleAtivo} disabled={saving}>
              {user.ativo ? "Desativar" : "Ativar"}
            </button>
            <button className="btn btn-brand" onClick={() => patch({})} disabled={saving}>
              {saving ? "Salvando…" : "Salvar"}
            </button>
          </div>
        }
      />

      {msg && (
        <div className="card p-3 text-sm border-emerald-300 text-emerald-700 dark:border-emerald-800 dark:text-emerald-300">
          {msg}
        </div>
      )}
      {err && (
        <div className="card p-3 text-sm border-rose-300 text-rose-700 dark:border-rose-800 dark:text-rose-300">
          {err}
        </div>
      )}

      <div className="grid gap-4 md:grid-cols-3">
        {/* Dados principais */}
        <section className="card md:col-span-2 space-y-3">
          <h3 className="font-medium">Dados</h3>
          <div className="grid gap-3 sm:grid-cols-2">
            <div>
              <label className="text-xs muted">Nome</label>
              <input
                className="input mt-1"
                value={user.nome}
                onChange={(e) => setUser({ ...user, nome: e.target.value })}
                placeholder="Nome completo"
              />
            </div>
            <div>
              <label className="text-xs muted">E-mail</label>
              <input
                className="input mt-1"
                value={user.email}
                onChange={(e) => setUser({ ...user, email: e.target.value })}
                placeholder="email@exemplo.com"
              />
            </div>
            <div>
              <label className="text-xs muted">Papel</label>
              <select
                className="input mt-1"
                value={user.role || "analista"}
                onChange={(e) => setUser({ ...user, role: e.target.value as any })}
              >
                <option value="admin">Administrador</option>
                <option value="financeiro">Financeiro</option>
                <option value="analista">Analista</option>
              </select>
            </div>
            <div>
              <label className="text-xs muted">Status</label>
              <div className="mt-1">
                <span className={`chip ${user.ativo ? "" : "muted"}`}>{user.ativo ? "Ativo" : "Inativo"}</span>
              </div>
            </div>
          </div>
          <div className="flex gap-2">
            <button
              className="btn"
              onClick={() => patch({ nome: user.nome, email: user.email, role: user.role })}
              disabled={saving}
            >
              {saving ? "Salvando…" : "Salvar alterações"}
            </button>
            <button
              className="btn"
              onClick={() => alert("Funcionalidade de reset de senha – implemente a chamada da sua API.")}
            >
              Resetar senha
            </button>
          </div>
        </section>

        {/* Metadados / Ações perigosas */}
        <section className="card space-y-3">
          <h3 className="font-medium">Metadados</h3>
          <p className="text-sm">
            <span className="muted">Criado em:</span>{" "}
            {user.criadoEm ? new Date(user.criadoEm).toLocaleString() : "-"}
          </p>

          <div className="pt-2">
            <h4 className="font-medium text-rose-600 dark:text-rose-400">Zona perigosa</h4>
            <p className="muted text-sm">Ações permanentes. Cuidado.</p>
            <div className="mt-2 flex gap-2">
              <button className="btn" onClick={toggleAtivo} disabled={saving}>
                {user.ativo ? "Desativar" : "Ativar"}
              </button>
              <button className="btn" onClick={removeUser} disabled={saving}>
                Excluir usuário
              </button>
            </div>
          </div>
        </section>
      </div>
    </PageLayout>
  );
}


==== src/app/dashboard/configuracoes/usuarios/[id]/editar/page.tsx ====
"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { apiFetch } from "@/lib/api";

export default function EditUsuarioPage() {
  const { id } = useParams<{ id:string }>();
  const router = useRouter();
  const [form, setForm] = useState<{ nome:string; email:string; role:string; ativo:boolean } | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [err, setErr] = useState<string|null>(null);

  useEffect(() => {
    (async () => {
      try {
        const r = await apiFetch(`/api/usuarios/${id}`);
        const b = await r.json().catch(async () => ({ raw: await r.text() }));
        const u = b.data ?? b;
        setForm({ nome: u.nome ?? "", email: u.email ?? "", role: u.role ?? "analista", ativo: !!u.ativo });
      } catch (e:any) { setErr(e.message); } finally { setLoading(false); }
    })();
  }, [id]);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!form) return;
    setErr(null); setSaving(true);
    try {
      const r = await fetch(`/api/usuarios/${id}`, {
        method:"PATCH",
        headers:{ "Content-Type":"application/json" },
        body: JSON.stringify(form)
      });
      const t = await r.text(); let d:any=null; try{ d=JSON.parse(t) }catch{ d={ raw:t } }
      if (!r.ok) throw new Error(d?.error || d?.message || d?.raw || `HTTP ${r.status}`);
      router.push(`/dashboard/configuracoes/usuarios/${id}`);
    } catch (e:any) { setErr(e.message); } finally { setSaving(false); }
  }

  if (loading) return <div className="p-4 text-sm text-neutral-500">Carregando…</div>;
  if (!form) return <div className="p-4">Usuário não encontrado.</div>;

  return (
    <div className="max-w-xl space-y-4">
      <h1 className="text-lg font-semibold">Editar Usuário #{id}</h1>
      <form onSubmit={onSubmit} className="rounded-2xl border border-neutral-200 dark:border-neutral-800 p-4 space-y-3">
        <input className="w-full rounded-xl border px-3 py-2" placeholder="Nome"
               value={form.nome} onChange={e=>setForm(f=>({...f!, nome:e.target.value}))}/>
        <input className="w-full rounded-xl border px-3 py-2" placeholder="E-mail"
               value={form.email} onChange={e=>setForm(f=>({...f!, email:e.target.value}))}/>
        <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
          <select className="rounded-xl border px-3 py-2" value={form.role}
                  onChange={e=>setForm(f=>({...f!, role:e.target.value}))}>
            <option value="admin">Admin</option>
            <option value="financeiro">Financeiro</option>
            <option value="analista">Analista</option>
          </select>
          <select className="rounded-xl border px-3 py-2" value={form.ativo ? "1":"0"}
                  onChange={e=>setForm(f=>({...f!, ativo: e.target.value==="1"}))}>
            <option value="1">Ativo</option>
            <option value="0">Inativo</option>
          </select>
        </div>
        {err && <p className="text-sm text-rose-500">{err}</p>}
        <div className="flex gap-2">
          <button disabled={saving} className="rounded-xl border px-3 py-2 text-sm">{saving?"Salvando…":"Salvar"}</button>
          <a href={`/dashboard/configuracoes/usuarios/${id}`} className="rounded-xl border px-3 py-2 text-sm">Cancelar</a>
        </div>
      </form>
    </div>
  );
}


==== src/app/dashboard/contribuicoes/page.tsx ====
// src/app/dashboard/contribuicoes/page.tsx
import { Suspense } from "react";
import ContribuicoesClient from "./Client";

export const metadata = {
  title: "Contribuições — FETRAF",
};

export default function Page() {
  return (
    <Suspense
      fallback={
        <div className="card p-6 text-sm text-[var(--muted)]">Carregando…</div>
      }
    >
      <ContribuicoesClient />
    </Suspense>
  );
}


==== src/app/dashboard/contribuicoes/novo/page.tsx ====
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

import PageLayout from "@/components/PageLayout";
import { PageHeader } from "@/components/PageHeader";

export default function NovaContribuicaoPage() {
  const router = useRouter();

  // Campos mínimos (deixe IDs como texto para tolerar variações de backend)
  const [filiadoId, setFiliadoId] = useState("");
  const [sindicatoId, setSindicatoId] = useState("");
  const [competencia, setCompetencia] = useState(""); // AAAA-MM
  const [valor, setValor] = useState<number | string>("");
  const [status, setStatus] = useState<"Pendente" | "Pago" | "Em Atraso" | "Cancelado">("Pendente");

  // Campos opcionais
  const [emailCobranca, setEmailCobranca] = useState("");

  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [msg, setMsg] = useState<string | null>(null);

  function parseValor(v: string | number) {
    if (typeof v === "number") return v;
    const clean = v.replace(/[^\d,.-]/g, "").replace(".", "").replace(",", ".");
    const n = Number(clean);
    return isNaN(n) ? 0 : n;
  }

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    setMsg(null);

    if (!filiadoId.trim()) {
      setErr("Informe o ID do filiado.");
      return;
    }
    if (!competencia.trim()) {
      setErr("Informe a competência (AAAA-MM).");
      return;
    }

    const valorNumber = parseValor(valor || 0);

    setLoading(true);
    try {
      const payload = {
        filiadoId: filiadoId.trim(),
        sindicatoId: sindicatoId.trim() || undefined,
        competencia: competencia.trim(),
        valor: valorNumber,
        status,
        emailCobranca: emailCobranca.trim() || undefined,
      };

      const res = await fetch("/api/contribuicoes", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const raw = await res.text();
      let body: any;
      try { body = JSON.parse(raw); } catch { body = { raw }; }

      if (!res.ok) {
        throw new Error(body?.error || body?.message || body?.raw || `HTTP ${res.status}`);
      }

      const id =
        body?.id ??
        body?.data?.id ??
        body?.contribuicao?.id ??
        body?.result?.id;

      setMsg("Contribuição criada com sucesso.");
      if (id != null) {
        router.replace(`/dashboard/contribuicoes/${id}`);
      } else {
        router.replace("/dashboard/contribuicoes");
      }
    } catch (e: any) {
      setErr(e.message ?? "Falha ao criar contribuição.");
    } finally {
      setLoading(false);
    }
  }

  return (
    <PageLayout>
      <PageHeader
        title="Nova Contribuição"
        subtitle="Cadastro e emissão"
        actions={
          <div className="flex items-center gap-2">
            <button className="btn" onClick={() => router.push("/dashboard/contribuicoes")}>
              Cancelar
            </button>
            <button form="form-nova-contrib" className="btn-brand" disabled={loading}>
              {loading ? "Salvando…" : "Salvar"}
            </button>
          </div>
        }
      />

      {err && <div className="card border-danger text-danger mb-3">{err}</div>}
      {msg && <div className="card border-[color-mix(in_oklch,var(--brand),black_14%)] mb-3">{msg}</div>}

      <form id="form-nova-contrib" onSubmit={onSubmit} className="grid grid-cols-1 gap-4 lg:grid-cols-3">
        <section className="card lg:col-span-2 space-y-3">
          <h2 className="text-base font-semibold">Informações da contribuição</h2>

          <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
            <div>
              <label className="text-sm muted">Filiado (ID) *</label>
              <input
                className="input"
                value={filiadoId}
                onChange={(e) => setFiliadoId(e.target.value)}
                placeholder="ex.: 123"
              />
            </div>

            <div>
              <label className="text-sm muted">Sindicato (ID)</label>
              <input
                className="input"
                value={sindicatoId}
                onChange={(e) => setSindicatoId(e.target.value)}
                placeholder="opcional"
              />
            </div>

            <div>
              <label className="text-sm muted">Competência (AAAA-MM) *</label>
              <input
                className="input"
                value={competencia}
                onChange={(e) => setCompetencia(e.target.value)}
                placeholder="2025-02"
              />
            </div>

            <div>
              <label className="text-sm muted">Valor (R$)</label>
              <input
                className="input"
                value={valor}
                onChange={(e) => setValor(e.target.value)}
                placeholder="ex.: 25,00"
              />
            </div>

            <div>
              <label className="text-sm muted">Status</label>
              <select className="input" value={status} onChange={(e) => setStatus(e.target.value as any)}>
                <option value="Pendente">Pendente</option>
                <option value="Pago">Pago</option>
                <option value="Em Atraso">Em Atraso</option>
                <option value="Cancelado">Cancelado</option>
              </select>
            </div>

            <div>
              <label className="text-sm muted">E-mail para cobrança</label>
              <input
                className="input"
                value={emailCobranca}
                onChange={(e) => setEmailCobranca(e.target.value)}
                placeholder="opcional"
              />
            </div>
          </div>
        </section>

        <section className="card space-y-3">
          <h2 className="text-base font-semibold">Ações</h2>
          <p className="text-sm muted">
            Após salvar, você poderá enviar cobrança, emitir boleto/PIX e acompanhar pagamentos na página de detalhes.
          </p>
          <div className="flex gap-2">
            <button type="button" className="btn" onClick={() => router.push("/dashboard/contribuicoes")}>
              Voltar
            </button>
            <button type="submit" className="btn-brand" disabled={loading}>
              {loading ? "Salvando…" : "Salvar"}
            </button>
          </div>
        </section>
      </form>
    </PageLayout>
  );
}


==== src/app/dashboard/contribuicoes/[id]/page.tsx ====
"use client";

import { useEffect, useMemo, useState } from "react";
import { useParams, useRouter, useSearchParams } from "next/navigation";
import { apiFetch } from "@/lib/api";

import PageLayout from "@/components/PageLayout";
import { PageHeader } from "@/components/PageHeader";

type Payment = {
  id: string | number;
  valor?: number;
  data?: string;
  metodo?: string;
  status?: string;
};

type HistoryEvent = {
  id?: string | number;
  tipo?: string;
  descricao?: string;
  data?: string;
  por?: string;
};

type Contrib = {
  id: string | number;
  filiado?: { id: string | number; nome: string; cpf?: string; email?: string } | null;
  sindicato?: { id: string | number; nome: string } | string | null;
  competencia?: string;
  valor?: number;
  status?: "Pendente" | "Pago" | "Em Atraso" | "Cancelado" | string;
  criadoEm?: string;
  atualizadoEm?: string;
  payments?: Payment[];
  history?: HistoryEvent[];
  boletoUrl?: string;
  pixCopiaECola?: string;
};

type Tab = "resumo" | "pagamentos" | "historico";

const fmtMoney = (v?: number) =>
  typeof v === "number" ? v.toLocaleString("pt-BR", { style: "currency", currency: "BRL" }) : "-";

export default function ContribDetailPage() {
  const params = useParams<{ id: string }>();
  const router = useRouter();
  const sp = useSearchParams();

  const id = params?.id;
  const tab = (sp.get("tab") as Tab) || "resumo";

  const [data, setData] = useState<Contrib | null>(null);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);
  const [msg, setMsg] = useState<string | null>(null);
  const [saving, setSaving] = useState<Tab | null>(null);

  const apiUrl = useMemo(() => `/api/contribuicoes/${encodeURIComponent(String(id))}`, [id]);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        setErr(null);

        const res = await apiFetch(apiUrl);
        const text = await res.text();
        let body: any;
        try {
          body = JSON.parse(text);
        } catch {
          body = { raw: text };
        }

        const raw = (body && (body.data || body)) || {};
        const c = raw as any;

        const obj: Contrib = {
          id: c.id != null ? c.id : id,
          filiado: c.filiado || body?.filiado || null,
          sindicato: c.sindicato || body?.sindicato || null,
          competencia: c.competencia || "",
          valor: typeof c.valor === "number" ? c.valor : Number(c.valor || 0),
          status: c.status || "Pendente",
          criadoEm: c.criadoEm || c["created_at"] || undefined,
          atualizadoEm: c.atualizadoEm || c["updated_at"] || undefined,
          payments: Array.isArray(c.payments) ? c.payments : Array.isArray(body?.payments) ? body.payments : [],
          history: Array.isArray(c.history) ? c.history : Array.isArray(body?.history) ? body.history : [],
          boletoUrl: c.boletoUrl || body?.boletoUrl,
          pixCopiaECola: c.pixCopiaECola || body?.pixCopiaECola,
        };

        if (!alive) return;
        setData(obj);
      } catch (e: any) {
        if (!alive) return;
        setErr(e.message || "Erro ao carregar.");
      } finally {
        if (!alive) return;
        setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [apiUrl, id]);

  function go(next: Tab) {
    const usp = new URLSearchParams(sp.toString());
    usp.set("tab", next);
    router.push(`/dashboard/contribuicoes/${id}?${usp.toString()}`);
  }

  async function patch(payload: any, which: Tab | null = null) {
    setSaving(which);
    setErr(null);
    setMsg(null);
    try {
      const res = await fetch(apiUrl, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const text = await res.text();
      let body: any;
      try {
        body = JSON.parse(text);
      } catch {
        body = { raw: text };
      }
      if (!res.ok) throw new Error(body?.error || body?.message || body?.raw || `HTTP ${res.status}`);
      setMsg("Atualizado com sucesso.");
    } catch (e: any) {
      setErr(e.message || "Falha na operação.");
    } finally {
      setSaving(null);
    }
  }

  async function marcarPago() {
    await patch({ status: "Pago" }, "resumo");
    setData((v) => (v ? { ...v, status: "Pago" } : v));
  }
  async function cancelar() {
    await patch({ status: "Cancelado" }, "resumo");
    setData((v) => (v ? { ...v, status: "Cancelado" } : v));
  }
  async function reenviarCobranca() {
    await patch({ action: "reenviar_cobranca" }, "resumo");
  }

  const fmtDate = (d?: string) => (d ? new Date(d).toLocaleString("pt-BR") : "-");

  return (
    <PageLayout>
      <PageHeader
        title={loading ? "Carregando…" : `Contribuição #${data ? data.id : ""}`}
        subtitle="Resumo e histórico"
        actions={
          <div className="flex items-center gap-2">
            <button className="btn" onClick={() => router.push("/dashboard/contribuicoes")}>
              Voltar
            </button>

            {/* Abrir boleto */}
            <a
              className="btn"
              href={data?.boletoUrl ? data.boletoUrl : "#"}
              target={data?.boletoUrl ? "_blank" : undefined}
              rel={data?.boletoUrl ? "noopener noreferrer" : undefined}
              aria-disabled={!data?.boletoUrl}
            >
              Ver boleto/PDF
            </a>

            <button className="btn" onClick={reenviarCobranca} disabled={Boolean(saving)}>
              {saving === "resumo" ? "Processando..." : "Reenviar cobrança"}
            </button>
            <button className="btn border-danger text-danger" onClick={cancelar} disabled={Boolean(saving)}>
              Cancelar
            </button>
            <button className="btn-brand" onClick={marcarPago} disabled={Boolean(saving) || data?.status === "Pago"}>
              {saving === "resumo" ? "Processando..." : "Marcar como Pago"}
            </button>
          </div>
        }
      />

      <div className="flex gap-2 mb-3">
        <button className={`tab ${tab === "resumo" ? "tab-active" : ""}`} onClick={() => go("resumo")}>
          Resumo
        </button>
        <button className={`tab ${tab === "pagamentos" ? "tab-active" : ""}`} onClick={() => go("pagamentos")}>
          Pagamentos
        </button>
        <button className={`tab ${tab === "historico" ? "tab-active" : ""}`} onClick={() => go("historico")}>
          Histórico
        </button>
      </div>

      {err && <div className="card border-danger text-danger mb-3">{err}</div>}
      {msg && <div className="card border-[color-mix(in_oklch,var(--brand),black_14%)] mb-3">{msg}</div>}

      {loading ? (
        <div className="card">Carregando…</div>
      ) : tab === "resumo" ? (
        <section className="grid grid-cols-1 gap-4 lg:grid-cols-3">
          <div className="card space-y-3 lg:col-span-2">
            <h2 className="text-base font-semibold">Informações</h2>
            <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
              <div>
                <p className="text-sm muted">Filiado</p>
                <p className="text-sm">
                  {data?.filiado?.nome ?? "-"}
                  {data?.filiado?.cpf ? <span className="muted"> • {data.filiado.cpf}</span> : null}
                </p>
              </div>
              <div>
                <p className="text-sm muted">Sindicato</p>
                <p className="text-sm">
                  {typeof data?.sindicato === "string" ? (data?.sindicato as string) : (data?.sindicato as any)?.nome ?? "-"}
                </p>
              </div>
              <div>
                <p className="text-sm muted">Competência</p>
                <p className="text-sm">{data?.competencia ?? "-"}</p>
              </div>
              <div>
                <p className="text-sm muted">Valor</p>
                <p className="text-sm">{fmtMoney(data?.valor)}</p>
              </div>
              <div>
                <p className="text-sm muted">Status</p>
                <p className="text-sm">
                  <span
                    className={
                      "chip " +
                      (data?.status === "Pago"
                        ? "border-emerald-300"
                        : data?.status === "Pendente"
                        ? "border-amber-300"
                        : data?.status === "Em Atraso"
                        ? "border-rose-300"
                        : data?.status === "Cancelado"
                        ? "border-[color-mix(in_oklch,var(--fg),transparent_70%)]"
                        : "")
                    }
                  >
                    {data?.status ?? "-"}
                  </span>
                </p>
              </div>
              <div>
                <p className="text-sm muted">Criado</p>
                <p className="text-sm">{fmtDate(data?.criadoEm)}</p>
              </div>
              <div>
                <p className="text-sm muted">Atualizado</p>
                <p className="text-sm">{fmtDate(data?.atualizadoEm)}</p>
              </div>
            </div>

            {data?.pixCopiaECola ? (
              <div className="mt-2">
                <p className="text-sm muted mb-1">PIX (copia e cola)</p>
                <textarea className="input" rows={2} readOnly value={data.pixCopiaECola} />
              </div>
            ) : null}
          </div>

          <div className="card space-y-3">
            <h2 className="text-base font-semibold">Ações rápidas</h2>
            <div className="flex flex-col gap-2">
              <button className="btn" onClick={reenviarCobranca} disabled={Boolean(saving)}>
                Reenviar cobrança ao filiado
              </button>
              <a
                className="btn"
                href={data?.boletoUrl ? data.boletoUrl : "#"}
                target={data?.boletoUrl ? "_blank" : undefined}
                rel={data?.boletoUrl ? "noopener noreferrer" : undefined}
                aria-disabled={!data?.boletoUrl}
              >
                Abrir boleto/PDF
              </a>
              <button className="btn border-danger text-danger" onClick={cancelar} disabled={Boolean(saving)}>
                Cancelar cobrança
              </button>
              <button className="btn-brand" onClick={marcarPago} disabled={Boolean(saving) || data?.status === "Pago"}>
                Marcar como Pago
              </button>
            </div>
          </div>
        </section>
      ) : tab === "pagamentos" ? (
        <section className="card p-0 overflow-x-auto">
          {!data?.payments || data.payments.length === 0 ? (
            <div className="p-6 text-sm muted">Nenhum pagamento encontrado.</div>
          ) : (
            <table className="w-full text-sm">
              <thead className="bg-[var(--surface-2)]">
                <tr>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Data</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Método</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Status</th>
                  <th className="py-2.5 px-2 text-right font-medium border-b border-[var(--border)]">Valor</th>
                </tr>
              </thead>
              <tbody>
                {data.payments.map((p) => (
                  <tr key={String(p.id)} className="border-b border-[var(--border)]">
                    <td className="py-2.5 px-2">{p.data ? new Date(p.data).toLocaleString("pt-BR") : "-"}</td>
                    <td className="py-2.5 px-2">{p.metodo || "-"}</td>
                    <td className="py-2.5 px-2">{p.status || "-"}</td>
                    <td className="py-2.5 px-2 text-right">{fmtMoney(p.valor)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </section>
      ) : (
        <section className="card p-0 overflow-x-auto">
          {!data?.history || data.history.length === 0 ? (
            <div className="p-6 text-sm muted">Sem eventos no histórico.</div>
          ) : (
            <table className="w-full text-sm">
              <thead className="bg-[var(--surface-2)]">
                <tr>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Data</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Evento</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Descrição</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Por</th>
                </tr>
              </thead>
              <tbody>
                {data.history.map((h, i) => (
                  <tr key={String(h.id ?? i)} className="border-b border-[var(--border)]">
                    <td className="py-2.5 px-2">{h.data ? new Date(h.data).toLocaleString("pt-BR") : "-"}</td>
                    <td className="py-2.5 px-2">{h.tipo || "-"}</td>
                    <td className="py-2.5 px-2">{h.descricao || "-"}</td>
                    <td className="py-2.5 px-2">{h.por || "-"}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </section>
      )}
    </PageLayout>
  );
}


==== src/app/dashboard/filiados/page.tsx ====
// src/app/dashboard/filiados/page.tsx
import { Suspense } from "react";
import FiliadosClient from "./Client";

export const metadata = {
  title: "Filiados — FETRAF",
};

export default function Page() {
  return (
    <Suspense
      fallback={
        <div className="card p-6 text-sm text-[var(--muted)]">Carregando…</div>
      }
    >
      <FiliadosClient />
    </Suspense>
  );
}


==== src/app/dashboard/filiados/novo/page.tsx ====
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import PageLayout from "@/components/PageLayout";
import { PageHeader } from "@/components/PageHeader";

type FiliadoInput = {
  nome: string;
  cpf?: string;
  email?: string;
  telefone?: string;
  sindicato?: string;
  status?: "Ativo" | "Pendente" | "Inativo" | string;
  desde?: string; // yyyy-mm-dd
  endereco?: {
    logradouro?: string;
    numero?: string;
    bairro?: string;
    cidade?: string;
    uf?: string;
    cep?: string;
  };
  observacoes?: string;
};

export default function NovoFiliadoPage() {
  const router = useRouter();
  const [saving, setSaving] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);
  const [err, setErr] = useState<string | null>(null);

  const [f, setF] = useState<FiliadoInput>({
    nome: "",
    status: "Ativo",
  });

  async function submit(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    setMsg(null);

    if (!f.nome.trim()) {
      setErr("Informe o nome do filiado.");
      return;
    }

    setSaving(true);
    try {
      const payload = {
        ...f,
        desde: f.desde ? new Date(f.desde).toISOString() : undefined,
      };
      const res = await fetch("/api/filiados", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const text = await res.text();
      let body: any;
      try {
        body = JSON.parse(text);
      } catch {
        body = { raw: text };
      }
      if (!res.ok) throw new Error(body?.error || body?.message || body?.raw || `HTTP ${res.status}`);

      // tenta pegar id retornado em body.data.id / body.id
      const id =
        body?.data?.id ?? body?.id ?? body?.data?.[0]?.id ?? null;

      setMsg("Filiado criado com sucesso.");
      router.push(id ? `/dashboard/filiados/${id}` : "/dashboard/filiados");
    } catch (e: any) {
      setErr(e.message ?? "Falha ao criar filiado.");
    } finally {
      setSaving(false);
    }
  }

  return (
    <PageLayout>
      <PageHeader
        title="Novo Filiado"
        subtitle="Preencha os dados abaixo para cadastrar"
        actions={
          <div className="flex items-center gap-2">
            <button className="btn" onClick={() => router.push("/dashboard/filiados")}>
              Cancelar
            </button>
            <button className="btn btn-brand" form="form-filiado" type="submit" disabled={saving}>
              {saving ? "Salvando…" : "Salvar"}
            </button>
          </div>
        }
      />

      {msg && (
        <div className="card p-3 text-sm border-emerald-300 text-emerald-700 dark:border-emerald-800 dark:text-emerald-300">
          {msg}
        </div>
      )}
      {err && (
        <div className="card p-3 text-sm border-rose-300 text-rose-700 dark:border-rose-800 dark:text-rose-300">
          {err}
        </div>
      )}

      <form id="form-filiado" className="grid gap-4 md:grid-cols-3" onSubmit={submit}>
        {/* Dados principais */}
        <section className="card md:col-span-2 space-y-3">
          <h3 className="font-medium">Informações básicas</h3>
          <div className="grid gap-3 sm:grid-cols-2">
            <div className="sm:col-span-2">
              <label className="text-xs muted">Nome*</label>
              <input
                className="input mt-1"
                value={f.nome}
                onChange={(e) => setF({ ...f, nome: e.target.value })}
                placeholder="Nome completo"
                required
              />
            </div>
            <div>
              <label className="text-xs muted">CPF</label>
              <input
                className="input mt-1"
                value={f.cpf || ""}
                onChange={(e) => setF({ ...f, cpf: e.target.value })}
                placeholder="000.000.000-00"
              />
            </div>
            <div>
              <label className="text-xs muted">E-mail</label>
              <input
                className="input mt-1"
                type="email"
                value={f.email || ""}
                onChange={(e) => setF({ ...f, email: e.target.value })}
                placeholder="email@exemplo.com"
              />
            </div>
            <div>
              <label className="text-xs muted">Telefone</label>
              <input
                className="input mt-1"
                value={f.telefone || ""}
                onChange={(e) => setF({ ...f, telefone: e.target.value })}
                placeholder="(00) 00000-0000"
              />
            </div>
            <div>
              <label className="text-xs muted">Sindicato</label>
              <input
                className="input mt-1"
                value={f.sindicato || ""}
                onChange={(e) => setF({ ...f, sindicato: e.target.value })}
                placeholder="Nome do sindicato"
              />
            </div>
            <div>
              <label className="text-xs muted">Status</label>
              <select
                className="input mt-1"
                value={f.status || "Ativo"}
                onChange={(e) => setF({ ...f, status: e.target.value })}
              >
                <option>Ativo</option>
                <option>Pendente</option>
                <option>Inativo</option>
              </select>
            </div>
            <div>
              <label className="text-xs muted">Desde</label>
              <input
                className="input mt-1"
                type="date"
                value={f.desde || ""}
                onChange={(e) => setF({ ...f, desde: e.target.value })}
              />
            </div>
          </div>

          <div>
            <label className="text-xs muted">Observações</label>
            <textarea
              className="input mt-1 h-28"
              value={f.observacoes || ""}
              onChange={(e) => setF({ ...f, observacoes: e.target.value })}
              placeholder="Anotações internas"
            />
          </div>

          <div>
            <h4 className="font-medium">Endereço</h4>
            <div className="mt-2 grid gap-3 sm:grid-cols-2">
              <input
                className="input"
                placeholder="Logradouro"
                value={f.endereco?.logradouro || ""}
                onChange={(e) =>
                  setF({ ...f, endereco: { ...(f.endereco || {}), logradouro: e.target.value } })
                }
              />
              <input
                className="input"
                placeholder="Número"
                value={f.endereco?.numero || ""}
                onChange={(e) =>
                  setF({ ...f, endereco: { ...(f.endereco || {}), numero: e.target.value } })
                }
              />
              <input
                className="input"
                placeholder="Bairro"
                value={f.endereco?.bairro || ""}
                onChange={(e) =>
                  setF({ ...f, endereco: { ...(f.endereco || {}), bairro: e.target.value } })
                }
              />
              <input
                className="input"
                placeholder="Cidade"
                value={f.endereco?.cidade || ""}
                onChange={(e) =>
                  setF({ ...f, endereco: { ...(f.endereco || {}), cidade: e.target.value } })
                }
              />
              <input
                className="input"
                placeholder="UF"
                value={f.endereco?.uf || ""}
                onChange={(e) =>
                  setF({ ...f, endereco: { ...(f.endereco || {}), uf: e.target.value } })
                }
              />
              <input
                className="input"
                placeholder="CEP"
                value={f.endereco?.cep || ""}
                onChange={(e) =>
                  setF({ ...f, endereco: { ...(f.endereco || {}), cep: e.target.value } })
                }
              />
            </div>
          </div>
        </section>

        {/* Resumo/Ações */}
        <section className="card space-y-3">
          <h3 className="font-medium">Ações</h3>
          <p className="muted text-sm">
            Revise os dados antes de salvar. Você poderá editar depois.
          </p>
          <div className="flex gap-2">
            <button type="button" className="btn" onClick={() => router.push("/dashboard/filiados")}>
              Cancelar
            </button>
            <button type="submit" className="btn btn-brand" disabled={saving}>
              {saving ? "Salvando…" : "Salvar"}
            </button>
          </div>
        </section>
      </form>
    </PageLayout>
  );
}


==== src/app/dashboard/filiados/[id]/page.tsx ====
"use client";

import { useEffect, useMemo, useState } from "react";
import { useParams, useRouter, useSearchParams } from "next/navigation";
import PageLayout from "@/components/PageLayout";
import { PageHeader } from "@/components/PageHeader";
import { apiFetch } from "@/lib/api";
import Link from "next/link";

type Filiado = {
  id: string | number;
  nome: string;
  cpf?: string;
  email?: string;
  telefone?: string;
  sindicato?: string;
  status?: "Ativo" | "Pendente" | "Inativo" | string;
  desde?: string; // ISO
  endereco?: { logradouro?: string; numero?: string; bairro?: string; cidade?: string; uf?: string; cep?: string };
  observacoes?: string;
  criadoEm?: string;
  atualizadoEm?: string;
};

type Contrib = {
  id: string | number;
  competencia?: string; // AAAA-MM
  valor?: number;
  status?: "Paga" | "Em aberto" | "Atrasada" | string;
  criadoEm?: string;
};

const money = (v: number | undefined) =>
  v == null ? "-" : v.toLocaleString("pt-BR", { style: "currency", currency: "BRL" });

export default function FiliadoEditPage() {
  const router = useRouter();
  const params = useParams<{ id: string }>();
  const id = params?.id;
  const sp = useSearchParams();

  // aba via querystring (?tab=dados|contribuicoes|historico)
  const tab = (sp.get("tab") as "dados" | "contribuicoes" | "historico") || "dados";
  function setTab(t: "dados" | "contribuicoes" | "historico") {
    const usp = new URLSearchParams(sp.toString());
    usp.set("tab", t);
    router.push(`/dashboard/filiados/${id}?${usp.toString()}`);
  }

  const [f, setF] = useState<Filiado | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [msg, setMsg] = useState<string | null>(null);

  // Contribuições
  const [contribs, setContribs] = useState<Contrib[]>([]);
  const [cLoading, setCLoading] = useState(false);
  const [cErr, setCErr] = useState<string | null>(null);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        setErr(null);
        const res = await apiFetch(`/api/filiados/${id}`);
        const text = await res.text();
        let body: any;
        try {
          body = JSON.parse(text);
        } catch {
          body = { raw: text };
        }
        const fi: Filiado = body?.data ?? body ?? null;
        if (!alive) return;
        setF(fi);
      } catch (e: any) {
        if (!alive) return;
        setErr(e.message ?? "Falha ao carregar filiado.");
      } finally {
        if (!alive) return;
        setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [id]);

  useEffect(() => {
    if (tab !== "contribuicoes") return; // carrega on-demand
    let alive = true;
    (async () => {
      try {
        setCLoading(true);
        setCErr(null);
        const res = await apiFetch(`/api/contribuicoes?filiadoId=${id}&limit=25`);
        const txt = await res.text();
        let body: any;
        try {
          body = JSON.parse(txt);
        } catch {
          body = { raw: txt };
        }
        const list: Contrib[] = (Array.isArray(body) && body) || body?.data || body?.items || [];
        if (!alive) return;
        setContribs(list);
      } catch (e: any) {
        if (!alive) return;
        setCErr(e.message ?? "Falha ao carregar contribuições.");
      } finally {
        if (!alive) return;
        setCLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [id, tab]);

  async function patch(payload: Partial<Filiado>) {
    setErr(null);
    setMsg(null);
    setSaving(true);
    try {
      const res = await fetch(`/api/filiados/${id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const txt = await res.text();
      let body: any;
      try {
        body = JSON.parse(txt);
      } catch {
        body = { raw: txt };
      }
      if (!res.ok) throw new Error(body?.error || body?.message || body?.raw || `HTTP ${res.status}`);
      setMsg("Alterações salvas.");
      setF((cur) => (cur ? ({ ...cur, ...payload } as Filiado) : cur));
    } catch (e: any) {
      setErr(e.message);
    } finally {
      setSaving(false);
    }
  }

  async function removeF() {
    if (!confirm("Excluir este filiado permanentemente?")) return;
    setErr(null);
    setMsg(null);
    setSaving(true);
    try {
      const res = await fetch(`/api/filiados/${id}`, { method: "DELETE" });
      if (!res.ok) {
        const t = await res.text();
        let b: any;
        try {
          b = JSON.parse(t);
        } catch {
          b = { raw: t };
        }
        throw new Error(b?.error || b?.message || b?.raw || `HTTP ${res.status}`);
      }
      router.push("/dashboard/filiados");
    } catch (e: any) {
      setErr(e.message);
    } finally {
      setSaving(false);
    }
  }

  if (loading) {
    return (
      <PageLayout>
        <div className="card p-6 text-sm muted">Carregando…</div>
      </PageLayout>
    );
  }
  if (!f) {
    return (
      <PageLayout>
        <div className="card p-6">Filiado não encontrado.</div>
      </PageLayout>
    );
  }

  return (
    <PageLayout>
      <PageHeader
        title={f.nome || "Filiado"}
        subtitle={f.cpf ? `CPF: ${f.cpf}` : undefined}
        actions={
          <div className="flex items-center gap-2">
            <Link className="btn" href="/dashboard/filiados">
              Voltar
            </Link>
            <button className="btn" onClick={() => patch({})} disabled={saving}>
              {saving ? "Salvando…" : "Salvar"}
            </button>
            <button className="btn" onClick={removeF} disabled={saving}>
              Excluir
            </button>
          </div>
        }
      />

      {msg && (
        <div className="card p-3 text-sm border-emerald-300 text-emerald-700 dark:border-emerald-800 dark:text-emerald-300">
          {msg}
        </div>
      )}
      {err && (
        <div className="card p-3 text-sm border-rose-300 text-rose-700 dark:border-rose-800 dark:text-rose-300">
          {err}
        </div>
      )}

      {/* Abas */}
      <div className="mb-3 flex gap-2 border-b border-[var(--border)]">
        {(["dados", "contribuicoes", "historico"] as const).map((key) => {
          const label = key === "dados" ? "Dados" : key === "contribuicoes" ? "Contribuições" : "Histórico";
          const active = tab === key;
          return (
            <button
              key={key}
              onClick={() => setTab(key)}
              className={`px-3 py-2 text-sm rounded-t-lg border-b-2 ${
                active ? "border-[var(--brand)]" : "border-transparent text-[var(--muted)] hover:text-[var(--text)]"
              }`}
            >
              {label}
            </button>
          );
        })}
      </div>

      {/* ====== ABA DADOS ====== */}
      {tab === "dados" && (
        <div className="grid gap-4 md:grid-cols-3">
          <section className="card md:col-span-2 space-y-3">
            <h3 className="font-medium">Informações básicas</h3>
            <div className="grid gap-3 sm:grid-cols-2">
              <div>
                <label className="text-xs muted">Nome</label>
                <input
                  className="input mt-1"
                  value={f.nome}
                  onChange={(e) => setF({ ...f, nome: e.target.value })}
                  placeholder="Nome completo"
                />
              </div>
              <div>
                <label className="text-xs muted">CPF</label>
                <input
                  className="input mt-1"
                  value={f.cpf || ""}
                  onChange={(e) => setF({ ...f, cpf: e.target.value })}
                  placeholder="000.000.000-00"
                />
              </div>
              <div>
                <label className="text-xs muted">E-mail</label>
                <input
                  className="input mt-1"
                  value={f.email || ""}
                  onChange={(e) => setF({ ...f, email: e.target.value })}
                  placeholder="email@exemplo.com"
                />
              </div>
              <div>
                <label className="text-xs muted">Telefone</label>
                <input
                  className="input mt-1"
                  value={f.telefone || ""}
                  onChange={(e) => setF({ ...f, telefone: e.target.value })}
                  placeholder="(00) 00000-0000"
                />
              </div>
              <div>
                <label className="text-xs muted">Sindicato</label>
                <input
                  className="input mt-1"
                  value={f.sindicato || ""}
                  onChange={(e) => setF({ ...f, sindicato: e.target.value })}
                  placeholder="Nome do sindicato"
                />
              </div>
              <div>
                <label className="text-xs muted">Status</label>
                <select
                  className="input mt-1"
                  value={f.status || "Ativo"}
                  onChange={(e) => setF({ ...f, status: e.target.value })}
                >
                  <option>Ativo</option>
                  <option>Pendente</option>
                  <option>Inativo</option>
                </select>
              </div>
              <div>
                <label className="text-xs muted">Desde</label>
                <input
                  className="input mt-1"
                  type="date"
                  value={f.desde ? new Date(f.desde).toISOString().substring(0, 10) : ""}
                  onChange={(e) =>
                    setF({ ...f, desde: e.target.value ? new Date(e.target.value).toISOString() : undefined })
                  }
                />
              </div>
            </div>

            <div>
              <label className="text-xs muted">Observações</label>
              <textarea
                className="input mt-1 h-28"
                value={f.observacoes || ""}
                onChange={(e) => setF({ ...f, observacoes: e.target.value })}
                placeholder="Anotações internas"
              />
            </div>

            <div>
              <h4 className="font-medium">Endereço</h4>
              <div className="mt-2 grid gap-3 sm:grid-cols-2">
                <input
                  className="input"
                  placeholder="Logradouro"
                  value={f.endereco?.logradouro || ""}
                  onChange={(e) => setF({ ...f, endereco: { ...(f.endereco || {}), logradouro: e.target.value } })}
                />
                <input
                  className="input"
                  placeholder="Número"
                  value={f.endereco?.numero || ""}
                  onChange={(e) => setF({ ...f, endereco: { ...(f.endereco || {}), numero: e.target.value } })}
                />
                <input
                  className="input"
                  placeholder="Bairro"
                  value={f.endereco?.bairro || ""}
                  onChange={(e) => setF({ ...f, endereco: { ...(f.endereco || {}), bairro: e.target.value } })}
                />
                <input
                  className="input"
                  placeholder="Cidade"
                  value={f.endereco?.cidade || ""}
                  onChange={(e) => setF({ ...f, endereco: { ...(f.endereco || {}), cidade: e.target.value } })}
                />
                <input
                  className="input"
                  placeholder="UF"
                  value={f.endereco?.uf || ""}
                  onChange={(e) => setF({ ...f, endereco: { ...(f.endereco || {}), uf: e.target.value } })}
                />
                <input
                  className="input"
                  placeholder="CEP"
                  value={f.endereco?.cep || ""}
                  onChange={(e) => setF({ ...f, endereco: { ...(f.endereco || {}), cep: e.target.value } })}
                />
              </div>
            </div>

            <div className="flex gap-2">
              <button className="btn" onClick={() => patch(f)} disabled={saving}>
                {saving ? "Salvando…" : "Salvar alterações"}
              </button>
              <button
                className="btn"
                onClick={() => router.push(`/dashboard/contribuicoes/nova?filiadoId=${f.id}`)}
              >
                Lançar contribuição
              </button>
            </div>
          </section>

          <section className="card space-y-3">
            <h3 className="font-medium">Resumo</h3>
            <div className="flex flex-wrap gap-2 text-sm">
              <span className="chip">{f.status || "-"}</span>
              {f.desde && <span className="chip">Desde {new Date(f.desde).toLocaleDateString()}</span>}
              {f.sindicato && <span className="chip">{f.sindicato}</span>}
            </div>
            <p className="text-sm">
              <span className="muted">Criado em:</span> {f.criadoEm ? new Date(f.criadoEm).toLocaleString() : "-"}
            </p>
            <p className="text-sm">
              <span className="muted">Atualizado em:</span>{" "}
              {f.atualizadoEm ? new Date(f.atualizadoEm).toLocaleString() : "-"}
            </p>
          </section>
        </div>
      )}

      {/* ====== ABA CONTRIBUIÇÕES ====== */}
      {tab === "contribuicoes" && (
        <section className="card p-0 overflow-x-auto">
          {cLoading ? (
            <div className="p-6 text-sm muted">Carregando…</div>
          ) : cErr ? (
            <div className="p-6 text-sm text-[var(--danger)]">Erro: {cErr}</div>
          ) : contribs.length === 0 ? (
            <div className="p-6 text-sm muted">Nenhuma contribuição encontrada.</div>
          ) : (
            <table className="w-full text-sm">
              <thead className="bg-[var(--surface-3)]">
                <tr>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)] text-[var(--muted)]">
                    Competência
                  </th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)] text-[var(--muted)]">
                    Valor
                  </th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)] text-[var(--muted)]">
                    Status
                  </th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)] text-[var(--muted)]">
                    Criado em
                  </th>
                </tr>
              </thead>
              <tbody>
                {contribs.map((c) => (
                  <tr key={c.id} className="hover:bg-[var(--surface-3)] border-b border-[var(--border)]">
                    <td className="py-2.5 px-2">{c.competencia ?? "-"}</td>
                    <td className="py-2.5 px-2">{money(c.valor)}</td>
                    <td className="py-2.5 px-2">
                      <span className="chip">{c.status ?? "-"}</span>
                    </td>
                    <td className="py-2.5 px-2">{c.criadoEm ? new Date(c.criadoEm).toLocaleString() : "-"}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </section>
      )}

      {/* ====== ABA HISTÓRICO ====== */}
      {tab === "historico" && (
        <div className="grid gap-4 md:grid-cols-2">
          <section className="card">
            <h3 className="font-medium mb-2">Eventos</h3>
            <ul className="space-y-2 text-sm">
              <li className="flex justify-between">
                <span className="muted">Cadastro</span>
                <span>{f.criadoEm ? new Date(f.criadoEm).toLocaleString() : "-"}</span>
              </li>
              <li className="flex justify-between">
                <span className="muted">Última atualização</span>
                <span>{f.atualizadoEm ? new Date(f.atualizadoEm).toLocaleString() : "-"}</span>
              </li>
              {/* Adapte com eventos do seu backend */}
            </ul>
          </section>
          <section className="card">
            <h3 className="font-medium mb-2">Anotações</h3>
            <textarea
              className="input h-44"
              value={f.observacoes || ""}
              onChange={(e) => setF({ ...f, observacoes: e.target.value })}
              placeholder="Linha do tempo, ocorrências, etc."
            />
            <div className="mt-2">
              <button className="btn" onClick={() => patch({ observacoes: f.observacoes })} disabled={saving}>
                {saving ? "Salvando…" : "Salvar anotações"}
              </button>
            </div>
          </section>
        </div>
      )}
    </PageLayout>
  );
}


==== src/app/dashboard/filiados/[id]/editar/page.tsx ====
"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { apiFetch } from "@/lib/api";

type Form = {
  nome: string;
  cpf: string;
  email: string;
  telefone: string;
  sindicato: string;
  status: string;
  desde: string;
  endereco: string;
  nascimento: string;
};

export default function EditFiliadoPage() {
  const { id } = useParams<{ id: string }>();
  const router = useRouter();
  const [form, setForm] = useState<Form | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [ok, setOk] = useState<string | null>(null);

  useEffect(() => {
    (async () => {
      try {
        const res = await apiFetch(`/api/filiados/${id}`);
        const body = await res.json().catch(async () => ({ raw: await res.text() }));
        const f = body.data ?? body;
        const initial: Form = {
          nome: f.nome ?? "",
          cpf: f.cpf ?? "",
          email: f.email ?? "",
          telefone: f.telefone ?? "",
          sindicato: f.sindicato ?? "",
          status: f.status ?? "Ativo",
          desde: f.desde ?? "",
          endereco: f.endereco ?? "",
          nascimento: f.nascimento ?? "",
        };
        setForm(initial);
      } catch (e: any) {
        setErr(e.message);
      } finally {
        setLoading(false);
      }
    })();
  }, [id]);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!form) return;
    setErr(null);
    setOk(null);
    setSaving(true);
    try {
      const res = await fetch(`/api/filiados/${id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });
      const text = await res.text();
      let data: any = null;
      try { data = JSON.parse(text); } catch { data = { raw: text }; }
      if (!res.ok) throw new Error(data?.error || data?.message || data?.raw || `HTTP ${res.status}`);
      setOk("Alterações salvas.");
      router.push(`/dashboard/filiados/${id}`);
    } catch (e: any) {
      setErr(e.message);
    } finally {
      setSaving(false);
    }
  }

  if (loading) return <div className="p-4 text-sm text-neutral-500">Carregando…</div>;
  if (!form) return <div className="p-4">Filiado não encontrado.</div>;

  return (
    <div className="max-w-2xl space-y-4">
      <h1 className="text-lg font-semibold">Editar Filiado #{id}</h1>

      <form onSubmit={onSubmit} className="rounded-2xl border border-neutral-200 dark:border-neutral-800 p-4 space-y-3">
        <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
          <input className="rounded-xl border px-3 py-2" placeholder="Nome"
                 value={form.nome} onChange={(e)=>setForm(f=>({...f!, nome:e.target.value}))} />
          <input className="rounded-xl border px-3 py-2" placeholder="CPF"
                 value={form.cpf} onChange={(e)=>setForm(f=>({...f!, cpf:e.target.value}))} />
          <input className="rounded-xl border px-3 py-2" placeholder="E-mail"
                 value={form.email} onChange={(e)=>setForm(f=>({...f!, email:e.target.value}))} />
          <input className="rounded-xl border px-3 py-2" placeholder="Telefone"
                 value={form.telefone} onChange={(e)=>setForm(f=>({...f!, telefone:e.target.value}))} />
          <input className="rounded-xl border px-3 py-2" placeholder="Sindicato"
                 value={form.sindicato} onChange={(e)=>setForm(f=>({...f!, sindicato:e.target.value}))} />
          <select className="rounded-xl border px-3 py-2"
                  value={form.status} onChange={(e)=>setForm(f=>({...f!, status:e.target.value}))}>
            <option>Ativo</option>
            <option>Pendente</option>
            <option>Inativo</option>
          </select>
          <input className="rounded-xl border px-3 py-2" placeholder="Desde (YYYY-MM-DD)"
                 value={form.desde} onChange={(e)=>setForm(f=>({...f!, desde:e.target.value}))} />
          <input className="rounded-xl border px-3 py-2" placeholder="Nascimento (YYYY-MM-DD)"
                 value={form.nascimento} onChange={(e)=>setForm(f=>({...f!, nascimento:e.target.value}))} />
        </div>

        <input className="w-full rounded-xl border px-3 py-2" placeholder="Endereço"
               value={form.endereco} onChange={(e)=>setForm(f=>({...f!, endereco:e.target.value}))} />

        {err && <p className="text-sm text-rose-500">{err}</p>}
        {ok && <p className="text-sm text-emerald-600">{ok}</p>}

        <div className="flex gap-2">
          <button disabled={saving} className="rounded-xl border px-3 py-2 text-sm">
            {saving ? "Salvando..." : "Salvar"}
          </button>
          <a href={`/dashboard/filiados/${id}`} className="rounded-xl border px-3 py-2 text-sm">Cancelar</a>
        </div>
      </form>
    </div>
  );
}


==== src/app/dashboard/relatorios/page.tsx ====
// src/app/dashboard/relatorios/page.tsx
import { Suspense } from "react";
import RelatoriosClient from "./Client";

export const metadata = {
  title: "Relatórios — FETRAF",
};

export default function Page() {
  return (
    <Suspense
      fallback={
        <div className="card p-6 text-sm text-[var(--muted)]">Carregando…</div>
      }
    >
      <RelatoriosClient />
    </Suspense>
  );
}


==== src/app/dashboard/relatorios/novo/page.tsx ====
"use client";

import Link from "next/link";
import { useState } from "react";

export default function NovoRelatorioPage() {
  const [form, setForm] = useState({
    nome: "",
    tipo: "Filiados", // ex.: Filiados | ContribuiÃ§Ãµes | Financeiro
    periodoInicio: "",
    periodoFim: "",
    formato: "csv" as "csv" | "pdf",
    filtros: "" // opcional (JSON simples / texto)
  });
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [ok, setOk] = useState<string | null>(null);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setErr(null); setOk(null); setLoading(true);
    try {
      // Envia o que existir; backend pode ignorar campos desconhecidos
      const res = await fetch("/api/relatorios", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });
      const text = await res.text();
      let data: any = null; try { data = JSON.parse(text); } catch { data = { raw: text }; }
      if (!res.ok) throw new Error(data?.error || data?.message || data?.raw || `HTTP ${res.status}`);
      setOk("RelatÃ³rio solicitado.");
      const id = data?.id ?? data?.data?.id;
      window.location.href = id ? `/dashboard/relatorios/${id}` : "/dashboard/relatorios";
    } catch (e: any) {
      setErr(e.message);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="max-w-xl space-y-4">
      <h1 className="text-lg font-semibold">Novo RelatÃ³rio</h1>
      <form onSubmit={onSubmit} className="rounded-2xl border border-neutral-200 dark:border-neutral-800 p-4 space-y-3">
        <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
          <input className="rounded-xl border px-3 py-2" placeholder="Nome (opcional)"
                 value={form.nome} onChange={(e)=>setForm(f=>({...f, nome:e.target.value}))}/>
          <select className="rounded-xl border px-3 py-2"
                  value={form.tipo} onChange={(e)=>setForm(f=>({...f, tipo:e.target.value}))}>
            <option>Filiados</option>
            <option>ContribuiÃ§Ãµes</option>
            <option>Financeiro</option>
          </select>
          <input className="rounded-xl border px-3 py-2" type="date"
                 placeholder="InÃ­cio" value={form.periodoInicio}
                 onChange={(e)=>setForm(f=>({...f, periodoInicio:e.target.value}))}/>
          <input className="rounded-xl border px-3 py-2" type="date"
                 placeholder="Fim" value={form.periodoFim}
                 onChange={(e)=>setForm(f=>({...f, periodoFim:e.target.value}))}/>
          <select className="rounded-xl border px-3 py-2"
                  value={form.formato} onChange={(e)=>setForm(f=>({...f, formato:e.target.value as any}))}>
            <option value="csv">CSV</option>
            <option value="pdf">PDF</option>
          </select>
          <input className="rounded-xl border px-3 py-2 sm:col-span-2" placeholder='Filtros (ex.: {"sindicato":"FETRAF"})'
                 value={form.filtros} onChange={(e)=>setForm(f=>({...f, filtros:e.target.value}))}/>
        </div>

        {err && <p className="text-sm text-rose-500">{err}</p>}
        {ok && <p className="text-sm text-emerald-600">{ok}</p>}

        <div className="flex gap-2">
          <button disabled={loading} className="rounded-xl border px-3 py-2 text-sm">
            {loading ? "Enviando..." : "Gerar"}
          </button>
          <Link href="/dashboard/relatorios" className="rounded-xl border px-3 py-2 text-sm">Cancelar</Link>
        </div>
      </form>
    </div>
  );
}





==== src/app/dashboard/relatorios/[id]/page.tsx ====
"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { apiFetch } from "@/lib/api";

type Relatorio = {
  id: string | number;
  nome?: string;
  tipo?: string;
  status?: string;
  criadoEm?: string;
  periodoInicio?: string;
  periodoFim?: string;
  formatos?: string[];     // ex: ["csv","pdf"]
  fileUrl?: string;        // se o backend retornar diretamente
};

function labelNome(r: Relatorio) {
  return r.nome ?? r.tipo ?? `Relatório ${r.id}`;
}
function fmtDate(d?: string) {
  if (!d) return "-";
  const t = Date.parse(d);
  return Number.isNaN(t) ? d : new Date(t).toLocaleString();
}

export default function RelatorioDetalhePage() {
  const { id } = useParams<{ id: string }>();
  const router = useRouter();

  const [item, setItem] = useState<Relatorio | null>(null);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);
  const [deleting, setDeleting] = useState(false);

  useEffect(() => {
    (async () => {
      try {
        const res = await apiFetch(`/api/relatorios/${id}`);
        const body = await res.json().catch(async () => ({ raw: await res.text() }));
        setItem(body.data ?? body);
      } catch (e: any) {
        setErr(e.message);
      } finally {
        setLoading(false);
      }
    })();
  }, [id]);

  async function onDelete() {
    if (!confirm("Tem certeza que deseja excluir este relatório?")) return;
    setDeleting(true);
    try {
      const res = await fetch(`/api/relatorios/${id}`, { method: "DELETE" });
      if (!res.ok) {
        const text = await res.text();
        let data: any = null; try { data = JSON.parse(text); } catch { data = { raw: text }; }
        throw new Error(data?.error || data?.message || data?.raw || `HTTP ${res.status}`);
      }
      router.push("/dashboard/relatorios");
    } catch (e: any) {
      alert(`Erro ao excluir: ${e.message}`);
    } finally {
      setDeleting(false);
    }
  }

  function download(format: "csv" | "pdf") {
    // proxy do app que encaminha para o backend
    window.location.href = `/api/relatorios/${id}/download?format=${format}`;
  }

  if (loading) return <div className="p-4 text-sm text-neutral-500">Carregando…</div>;
  if (err) return <div className="p-4 text-sm text-rose-500">Erro: {err}</div>;
  if (!item) return <div className="p-4">Relatório não encontrado.</div>;

  const formatos = (item.formatos && item.formatos.length ? item.formatos : ["csv", "pdf"]) as ("csv" | "pdf")[];

  return (
    <div className="max-w-3xl space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-lg font-semibold">{labelNome(item)} #{item.id}</h1>
        <div className="flex gap-2">
          <a href={`/dashboard/relatorios/${id}/editar`} className="rounded-xl border px-3 py-2 text-sm">Editar</a>
          <button onClick={onDelete} disabled={deleting}
            className="rounded-xl border px-3 py-2 text-sm text-rose-600 border-rose-300 disabled:opacity-50">
            {deleting ? "Excluindo..." : "Excluir"}
          </button>
          <button onClick={() => router.push("/dashboard/relatorios")} className="rounded-xl border px-3 py-2 text-sm">
            Voltar
          </button>
        </div>
      </div>

      <div className="rounded-2xl border border-neutral-200 dark:border-neutral-800 p-4 space-y-3">
        <dl className="grid grid-cols-1 gap-3 sm:grid-cols-2">
          <div><dt className="text-xs text-neutral-500">Status</dt><dd className="text-sm">{item.status ?? "-"}</dd></div>
          <div><dt className="text-xs text-neutral-500">Criado em</dt><dd className="text-sm">{fmtDate(item.criadoEm)}</dd></div>
          <div><dt className="text-xs text-neutral-500">Período</dt>
            <dd className="text-sm">
              {item.periodoInicio || item.periodoFim
                ? `${item.periodoInicio ?? "?"} — ${item.periodoFim ?? "?"}`
                : "-"}
            </dd>
          </div>
        </dl>

        <div className="flex flex-wrap gap-2 pt-2">
          {formatos.includes("csv") && (
            <button onClick={() => download("csv")} className="rounded-xl border px-3 py-2 text-sm">Baixar CSV</button>
          )}
          {formatos.includes("pdf") && (
            <button onClick={() => download("pdf")} className="rounded-xl border px-3 py-2 text-sm">Baixar PDF</button>
          )}
          {item.fileUrl && (
            <a className="rounded-xl border px-3 py-2 text-sm" href={item.fileUrl} target="_blank" rel="noreferrer">
              Abrir arquivo
            </a>
          )}
        </div>
      </div>
    </div>
  );
}


==== src/app/dashboard/relatorios/[id]/editar/page.tsx ====
"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { apiFetch } from "@/lib/api";

type Form = {
  nome: string;
  tipo: string;
  periodoInicio: string;
  periodoFim: string;
  formatos?: string; // ex.: "csv,pdf"
  filtros: string;
};

export default function EditRelatorioPage() {
  const { id } = useParams<{ id: string }>();
  const router = useRouter();

  const [form, setForm] = useState<Form | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [ok, setOk] = useState<string | null>(null);

  useEffect(() => {
    (async () => {
      try {
        const res = await apiFetch(`/api/relatorios/${id}`);
        const body = await res.json().catch(async () => ({ raw: await res.text() }));
        const r = body.data ?? body;
        const initial: Form = {
          nome: r.nome ?? r.tipo ?? "",
          tipo: r.tipo ?? "",
          periodoInicio: r.periodoInicio ?? "",
          periodoFim: r.periodoFim ?? "",
          formatos: Array.isArray(r.formatos) ? r.formatos.join(",") : "",
          filtros: typeof r.filtros === "string" ? r.filtros : (r.filtros ? JSON.stringify(r.filtros) : ""),
        };
        setForm(initial);
      } catch (e: any) {
        setErr(e.message);
      } finally {
        setLoading(false);
      }
    })();
  }, [id]);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!form) return;
    setErr(null); setOk(null); setSaving(true);
    try {
      const payload: any = {
        nome: form.nome,
        tipo: form.tipo,
        periodoInicio: form.periodoInicio,
        periodoFim: form.periodoFim,
      };
      if (form.formatos) payload.formatos = form.formatos.split(",").map(s => s.trim()).filter(Boolean);
      if (form.filtros) {
        try { payload.filtros = JSON.parse(form.filtros); }
        catch { payload.filtros = form.filtros; }
      }

      const res = await fetch(`/api/relatorios/${id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const text = await res.text();
      let data: any = null; try { data = JSON.parse(text); } catch { data = { raw: text }; }
      if (!res.ok) throw new Error(data?.error || data?.message || data?.raw || `HTTP ${res.status}`);

      setOk("Alterações salvas.");
      router.push(`/dashboard/relatorios/${id}`);
    } catch (e: any) {
      setErr(e.message);
    } finally {
      setSaving(false);
    }
  }

  if (loading) return <div className="p-4 text-sm text-neutral-500">Carregando…</div>;
  if (!form) return <div className="p-4">Relatório não encontrado.</div>;

  return (
    <div className="max-w-xl space-y-4">
      <h1 className="text-lg font-semibold">Editar Relatório #{id}</h1>

      <form onSubmit={onSubmit} className="rounded-2xl border border-neutral-200 dark:border-neutral-800 p-4 space-y-3">
        <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
          <input className="rounded-xl border px-3 py-2" placeholder="Nome"
                 value={form.nome} onChange={(e)=>setForm(f=>({...f!, nome:e.target.value}))}/>
          <input className="rounded-xl border px-3 py-2" placeholder="Tipo"
                 value={form.tipo} onChange={(e)=>setForm(f=>({...f!, tipo:e.target.value}))}/>
          <input className="rounded-xl border px-3 py-2" type="date" placeholder="Início"
                 value={form.periodoInicio} onChange={(e)=>setForm(f=>({...f!, periodoInicio:e.target.value}))}/>
          <input className="rounded-xl border px-3 py-2" type="date" placeholder="Fim"
                 value={form.periodoFim} onChange={(e)=>setForm(f=>({...f!, periodoFim:e.target.value}))}/>
          <input className="rounded-xl border px-3 py-2" placeholder="Formatos (csv,pdf)"
                 value={form.formatos ?? ""} onChange={(e)=>setForm(f=>({...f!, formatos:e.target.value}))}/>
          <input className="rounded-xl border px-3 py-2 sm:col-span-2" placeholder='Filtros (JSON ou texto)'
                 value={form.filtros} onChange={(e)=>setForm(f=>({...f!, filtros:e.target.value}))}/>
        </div>

        {err && <p className="text-sm text-rose-500">{err}</p>}
        {ok && <p className="text-sm text-emerald-600">{ok}</p>}

        <div className="flex gap-2">
          <button disabled={saving} className="rounded-xl border px-3 py-2 text-sm">
            {saving ? "Salvando..." : "Salvar"}
          </button>
          <a href={`/dashboard/relatorios/${id}`} className="rounded-xl border px-3 py-2 text-sm">Cancelar</a>
        </div>
      </form>
    </div>
  );
}


==== src/app/dashboard/sindicatos/page.tsx ====
// src/app/dashboard/sindicatos/page.tsx
import { Suspense } from "react";
import SindicatosClient from "./Client";

export const metadata = {
  title: "Sindicatos — FETRAF",
};

export default function Page() {
  return (
    <Suspense
      fallback={
        <div className="card p-6 text-sm text-[var(--muted)]">Carregando…</div>
      }
    >
      <SindicatosClient />
    </Suspense>
  );
}


==== src/app/dashboard/sindicatos/novo/page.tsx ====
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

import PageLayout from "@/components/PageLayout";
import { PageHeader } from "@/components/PageHeader";

type Endereco = {
  logradouro?: string;
  numero?: string;
  bairro?: string;
  cep?: string;
  cidade?: string;
  uf?: string;
  complemento?: string;
};

export default function NovoSindicatoPage() {
  const router = useRouter();

  const [nome, setNome] = useState("");
  const [cnpj, setCnpj] = useState("");
  const [municipio, setMunicipio] = useState("");
  const [uf, setUf] = useState("");
  const [email, setEmail] = useState("");
  const [telefone, setTelefone] = useState("");
  const [status, setStatus] = useState<"Ativo" | "Inativo">("Ativo");

  const [endereco, setEndereco] = useState<Endereco>({});
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);
  const [msg, setMsg] = useState<string | null>(null);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    setMsg(null);

    if (!nome.trim()) {
      setErr("Informe o nome do sindicato.");
      return;
    }

    setLoading(true);
    try {
      const payload = {
        nome: nome.trim(),
        cnpj: cnpj.trim() || undefined,
        municipio: municipio.trim() || endereco.cidade || undefined,
        uf: (uf || endereco.uf || "").toUpperCase() || undefined,
        email: email.trim() || undefined,
        telefone: telefone.trim() || undefined,
        status,
        endereco,
      };

      const res = await fetch("/api/sindicatos", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const raw = await res.text();
      let body: any;
      try { body = JSON.parse(raw); } catch { body = { raw }; }

      if (!res.ok) {
        throw new Error(body?.error || body?.message || body?.raw || `HTTP ${res.status}`);
      }

      const id =
        body?.id ??
        body?.data?.id ??
        body?.sindicato?.id ??
        body?.result?.id;

      setMsg("Sindicato criado com sucesso.");
      if (id != null) {
        router.replace(`/dashboard/sindicatos/${id}`);
      } else {
        router.replace("/dashboard/sindicatos");
      }
    } catch (e: any) {
      setErr(e.message ?? "Falha ao criar sindicato.");
    } finally {
      setLoading(false);
    }
  }

  return (
    <PageLayout>
      <PageHeader
        title="Novo Sindicato"
        subtitle="Cadastro inicial"
        actions={
          <div className="flex items-center gap-2">
            <button className="btn" onClick={() => router.push("/dashboard/sindicatos")}>
              Cancelar
            </button>
            <button form="form-novo-sindicato" className="btn-brand" disabled={loading}>
              {loading ? "Salvando…" : "Salvar"}
            </button>
          </div>
        }
      />

      {err && <div className="card border-danger text-danger mb-3">{err}</div>}
      {msg && <div className="card border-[color-mix(in_oklch,var(--brand),black_14%)] mb-3">{msg}</div>}

      <form id="form-novo-sindicato" onSubmit={onSubmit} className="grid grid-cols-1 gap-4 lg:grid-cols-3">
        <section className="card lg:col-span-2 space-y-3">
          <h2 className="text-base font-semibold">Informações principais</h2>
          <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
            <div className="sm:col-span-2">
              <label className="text-sm muted">Nome *</label>
              <input className="input" value={nome} onChange={(e) => setNome(e.target.value)} />
            </div>
            <div>
              <label className="text-sm muted">CNPJ</label>
              <input className="input" value={cnpj} onChange={(e) => setCnpj(e.target.value)} />
            </div>
            <div>
              <label className="text-sm muted">Status</label>
              <select className="input" value={status} onChange={(e) => setStatus(e.target.value as any)}>
                <option value="Ativo">Ativo</option>
                <option value="Inativo">Inativo</option>
              </select>
            </div>
            <div>
              <label className="text-sm muted">Município</label>
              <input className="input" value={municipio} onChange={(e) => setMunicipio(e.target.value)} />
            </div>
            <div>
              <label className="text-sm muted">UF</label>
              <input className="input max-w-24" value={uf} onChange={(e) => setUf(e.target.value.toUpperCase())} />
            </div>
            <div>
              <label className="text-sm muted">E-mail</label>
              <input className="input" value={email} onChange={(e) => setEmail(e.target.value)} />
            </div>
            <div>
              <label className="text-sm muted">Telefone</label>
              <input className="input" value={telefone} onChange={(e) => setTelefone(e.target.value)} />
            </div>
          </div>
        </section>

        <section className="card space-y-3">
          <h2 className="text-base font-semibold">Endereço</h2>

          <div>
            <label className="text-sm muted">Logradouro</label>
            <input
              className="input"
              value={endereco.logradouro ?? ""}
              onChange={(e) => setEndereco((v) => ({ ...(v || {}), logradouro: e.target.value }))}
            />
          </div>

          <div className="grid grid-cols-3 gap-3">
            <div>
              <label className="text-sm muted">Número</label>
              <input
                className="input"
                value={endereco.numero ?? ""}
                onChange={(e) => setEndereco((v) => ({ ...(v || {}), numero: e.target.value }))}
              />
            </div>
            <div className="col-span-2">
              <label className="text-sm muted">Bairro</label>
              <input
                className="input"
                value={endereco.bairro ?? ""}
                onChange={(e) => setEndereco((v) => ({ ...(v || {}), bairro: e.target.value }))}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="text-sm muted">Cidade</label>
              <input
                className="input"
                value={endereco.cidade ?? ""}
                onChange={(e) => setEndereco((v) => ({ ...(v || {}), cidade: e.target.value }))}
              />
            </div>
            <div>
              <label className="text-sm muted">UF</label>
              <input
                className="input max-w-24"
                value={(endereco.uf ?? "").toUpperCase()}
                onChange={(e) => setEndereco((v) => ({ ...(v || {}), uf: e.target.value.toUpperCase() }))}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="text-sm muted">CEP</label>
              <input
                className="input"
                value={endereco.cep ?? ""}
                onChange={(e) => setEndereco((v) => ({ ...(v || {}), cep: e.target.value }))}
              />
            </div>
            <div>
              <label className="text-sm muted">Complemento</label>
              <input
                className="input"
                value={endereco.complemento ?? ""}
                onChange={(e) => setEndereco((v) => ({ ...(v || {}), complemento: e.target.value }))}
              />
            </div>
          </div>
        </section>
      </form>
    </PageLayout>
  );
}


==== src/app/dashboard/sindicatos/[id]/page.tsx ====
"use client";

import { useEffect, useMemo, useState } from "react";
import { useParams, useRouter, useSearchParams } from "next/navigation";
import { apiFetch } from "@/lib/api";

import PageLayout from "@/components/PageLayout";
import { PageHeader } from "@/components/PageHeader";

type Endereco = {
  logradouro?: string;
  numero?: string;
  bairro?: string;
  cep?: string;
  cidade?: string;
  municipio?: string;
  uf?: string;
  complemento?: string;
};

type FiliadoLite = {
  id: string | number;
  nome: string;
  cpf?: string;
  status?: string;
  desde?: string;
};

type HistEvt = {
  id?: string | number;
  tipo?: string;
  descricao?: string;
  data?: string;
  por?: string;
};

type Sindicato = {
  id: string | number;
  nome?: string;
  cnpj?: string;
  email?: string;
  telefone?: string;
  status?: "Ativo" | "Inativo" | "Pendente" | string;
  endereco?: Endereco | null;
  criadoEm?: string;
  atualizadoEm?: string;
  // opcionais
  filiados?: FiliadoLite[];
  history?: HistEvt[];
};

type Tab = "resumo" | "filiados" | "historico";

function fmtDate(d?: string) {
  return d ? new Date(d).toLocaleString("pt-BR") : "-";
}

export default function SindicatoDetailPage() {
  const params = useParams<{ id: string }>();
  const router = useRouter();
  const sp = useSearchParams();

  const id = params?.id;
  const tab = (sp.get("tab") as Tab) || "resumo";

  const [data, setData] = useState<Sindicato | null>(null);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);
  const [msg, setMsg] = useState<string | null>(null);
  const [saving, setSaving] = useState<Tab | null>(null);

  const apiUrl = useMemo(() => `/api/sindicatos/${encodeURIComponent(String(id))}`, [id]);

  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        setErr(null);

        const res = await apiFetch(apiUrl);
        const text = await res.text();
        let body: any;
        try {
          body = JSON.parse(text);
        } catch {
          body = { raw: text };
        }

        const s = (body?.data ?? body ?? {}) as any;

        const obj: Sindicato = {
          id: s.id ?? id,
          nome: s.nome ?? "",
          cnpj: s.cnpj ?? "",
          email: s.email ?? "",
          telefone: s.telefone ?? "",
          status: s.status ?? "Ativo",
          endereco:
            s.endereco ??
            (s.address
              ? {
                  logradouro: s.address.logradouro ?? s.address.street ?? "",
                  numero: s.address.numero ?? s.address.number ?? "",
                  bairro: s.address.bairro ?? s.address.district ?? "",
                  cep: s.address.cep ?? s.address.zip ?? "",
                  cidade: s.address.cidade ?? s.address.city ?? "",
                  municipio: s.address.municipio ?? s.address.county ?? "",
                  uf: s.address.uf ?? s.address.state ?? "",
                  complemento: s.address.complemento ?? s.address.complement ?? "",
                }
              : null),
          criadoEm: s.criadoEm ?? s.created_at ?? undefined,
          atualizadoEm: s.atualizadoEm ?? s.updated_at ?? undefined,
          filiados: Array.isArray(s.filiados) ? s.filiados : Array.isArray(body?.filiados) ? body.filiados : [],
          history: Array.isArray(s.history) ? s.history : Array.isArray(body?.history) ? body.history : [],
        };

        if (!alive) return;
        setData(obj);
      } catch (e: any) {
        if (!alive) return;
        setErr(e.message ?? "Erro ao carregar.");
      } finally {
        if (!alive) return;
        setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [apiUrl, id]);

  function go(next: Tab) {
    const usp = new URLSearchParams(sp.toString());
    usp.set("tab", next);
    router.push(`/dashboard/sindicatos/${id}?${usp.toString()}`);
  }

  async function patch(payload: any, which: Tab | null = null) {
    setSaving(which);
    setErr(null);
    setMsg(null);
    try {
      const res = await fetch(apiUrl, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const text = await res.text();
      let body: any;
      try {
        body = JSON.parse(text);
      } catch {
        body = { raw: text };
      }
      if (!res.ok) throw new Error(body?.error || body?.message || body?.raw || `HTTP ${res.status}`);
      setMsg("Atualizado com sucesso.");
    } catch (e: any) {
      setErr(e.message || "Falha na operação.");
    } finally {
      setSaving(null);
    }
  }

  async function ativar() {
    await patch({ status: "Ativo" }, "resumo");
    setData((v) => (v ? { ...v, status: "Ativo" } : v));
  }
  async function desativar() {
    await patch({ status: "Inativo" }, "resumo");
    setData((v) => (v ? { ...v, status: "Inativo" } : v));
  }

  return (
    <PageLayout>
      <PageHeader
        title={loading ? "Carregando…" : `Sindicato #${data ? data.id : ""}`}
        subtitle="Dados cadastrais e histórico"
        actions={
          <div className="flex items-center gap-2">
            <button className="btn" onClick={() => router.push("/dashboard/sindicatos")}>
              Voltar
            </button>
            <a className="btn" href={`/dashboard/sindicatos/${id}/editar`}>
              Editar
            </a>
            {data?.status === "Ativo" ? (
              <button className="btn border-danger text-danger" disabled={Boolean(saving)} onClick={desativar}>
                Desativar
              </button>
            ) : (
              <button className="btn-brand" disabled={Boolean(saving)} onClick={ativar}>
                Ativar
              </button>
            )}
          </div>
        }
      />

      <div className="flex gap-2 mb-3">
        <button className={`tab ${tab === "resumo" ? "tab-active" : ""}`} onClick={() => go("resumo")}>
          Resumo
        </button>
        <button className={`tab ${tab === "filiados" ? "tab-active" : ""}`} onClick={() => go("filiados")}>
          Filiados
        </button>
        <button className={`tab ${tab === "historico" ? "tab-active" : ""}`} onClick={() => go("historico")}>
          Histórico
        </button>
      </div>

      {err && <div className="card border-danger text-danger mb-3">{err}</div>}
      {msg && <div className="card border-[color-mix(in_oklch,var(--brand),black_14%)] mb-3">{msg}</div>}

      {loading ? (
        <div className="card">Carregando…</div>
      ) : tab === "resumo" ? (
        <section className="grid grid-cols-1 gap-4 lg:grid-cols-3">
          <div className="card space-y-4 lg:col-span-2">
            <h2 className="text-base font-semibold">Informações</h2>

            <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
              <div>
                <p className="text-sm muted">Nome</p>
                <p className="text-sm">{data?.nome ?? "-"}</p>
              </div>
              <div>
                <p className="text-sm muted">CNPJ</p>
                <p className="text-sm">{data?.cnpj ?? "-"}</p>
              </div>
              <div>
                <p className="text-sm muted">E-mail</p>
                <p className="text-sm">{data?.email ?? "-"}</p>
              </div>
              <div>
                <p className="text-sm muted">Telefone</p>
                <p className="text-sm">{data?.telefone ?? "-"}</p>
              </div>
              <div>
                <p className="text-sm muted">Status</p>
                <p className="text-sm">
                  <span
                    className={
                      "chip " +
                      (data?.status === "Ativo"
                        ? "border-emerald-300"
                        : data?.status === "Pendente"
                        ? "border-amber-300"
                        : data?.status === "Inativo"
                        ? "border-rose-300"
                        : "")
                    }
                  >
                    {data?.status ?? "-"}
                  </span>
                </p>
              </div>
              <div>
                <p className="text-sm muted">Criado</p>
                <p className="text-sm">{fmtDate(data?.criadoEm)}</p>
              </div>
              <div>
                <p className="text-sm muted">Atualizado</p>
                <p className="text-sm">{fmtDate(data?.atualizadoEm)}</p>
              </div>
            </div>

            <div className="pt-2">
              <h3 className="text-sm font-semibold mb-2">Endereço</h3>
              <div className="grid grid-cols-1 gap-3 sm:grid-cols-3">
                <div className="sm:col-span-2">
                  <p className="text-sm muted">Logradouro</p>
                  <p className="text-sm">{data?.endereco?.logradouro ?? "-"}</p>
                </div>
                <div>
                  <p className="text-sm muted">Número</p>
                  <p className="text-sm">{data?.endereco?.numero ?? "-"}</p>
                </div>
                <div>
                  <p className="text-sm muted">Bairro</p>
                  <p className="text-sm">{data?.endereco?.bairro ?? "-"}</p>
                </div>
                <div>
                  <p className="text-sm muted">CEP</p>
                  <p className="text-sm">{data?.endereco?.cep ?? "-"}</p>
                </div>
                <div>
                  <p className="text-sm muted">Complemento</p>
                  <p className="text-sm">{data?.endereco?.complemento ?? "-"}</p>
                </div>
                <div>
                  <p className="text-sm muted">Cidade</p>
                  <p className="text-sm">{data?.endereco?.cidade ?? "-"}</p>
                </div>
                <div>
                  <p className="text-sm muted">Município</p>
                  <p className="text-sm">{data?.endereco?.municipio ?? "-"}</p>
                </div>
                <div>
                  <p className="text-sm muted">UF</p>
                  <p className="text-sm">{data?.endereco?.uf ?? "-"}</p>
                </div>
              </div>
            </div>
          </div>

          <div className="card space-y-3">
            <h2 className="text-base font-semibold">Ações rápidas</h2>
            <div className="flex flex-col gap-2">
              <a className="btn" href={`/dashboard/sindicatos/${id}/editar`}>
                Editar dados
              </a>
              {data?.status === "Ativo" ? (
                <button className="btn border-danger text-danger" onClick={desativar} disabled={Boolean(saving)}>
                  Desativar sindicato
                </button>
              ) : (
                <button className="btn-brand" onClick={ativar} disabled={Boolean(saving)}>
                  Ativar sindicato
                </button>
              )}
            </div>
          </div>
        </section>
      ) : tab === "filiados" ? (
        <section className="card p-0 overflow-x-auto">
          {!data?.filiados || data.filiados.length === 0 ? (
            <div className="p-6 text-sm muted">Nenhum filiado encontrado para este sindicato.</div>
          ) : (
            <table className="w-full text-sm">
              <thead className="bg-[var(--surface-2)]">
                <tr>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Nome</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">CPF</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Status</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Desde</th>
                </tr>
              </thead>
              <tbody>
                {data.filiados.map((f) => (
                  <tr key={String(f.id)} className="border-b border-[var(--border)]">
                    <td className="py-2.5 px-2">
                      <a className="hover:underline" href={`/dashboard/filiados/${f.id}`}>
                        {f.nome}
                      </a>
                    </td>
                    <td className="py-2.5 px-2">{f.cpf ?? "-"}</td>
                    <td className="py-2.5 px-2">
                      <span
                        className={
                          "chip " +
                          (f.status === "Ativo"
                            ? "border-emerald-300"
                            : f.status === "Pendente"
                            ? "border-amber-300"
                            : f.status === "Inativo"
                            ? "border-rose-300"
                            : "")
                        }
                      >
                        {f.status ?? "-"}
                      </span>
                    </td>
                    <td className="py-2.5 px-2 muted">{fmtDate(f.desde)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </section>
      ) : (
        <section className="card p-0 overflow-x-auto">
          {!data?.history || data.history.length === 0 ? (
            <div className="p-6 text-sm muted">Sem eventos no histórico.</div>
          ) : (
            <table className="w-full text-sm">
              <thead className="bg-[var(--surface-2)]">
                <tr>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Data</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Evento</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Descrição</th>
                  <th className="py-2.5 px-2 text-left font-medium border-b border-[var(--border)]">Por</th>
                </tr>
              </thead>
              <tbody>
                {data.history.map((h, i) => (
                  <tr key={String(h.id ?? i)} className="border-b border-[var(--border)]">
                    <td className="py-2.5 px-2">{fmtDate(h.data)}</td>
                    <td className="py-2.5 px-2">{h.tipo ?? "-"}</td>
                    <td className="py-2.5 px-2">{h.descricao ?? "-"}</td>
                    <td className="py-2.5 px-2">{h.por ?? "-"}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </section>
      )}
    </PageLayout>
  );
}


==== src/app/login/page.tsx ====
"use client";
import Brand from "@/components/Brand";
import Link from "next/link";
import { useEffect, useState } from "react";

function parseMaybeJson(t: string){ try{ return JSON.parse(t); }catch{ return { raw:t }; } }

export default function LoginPage() {
  const [email, setEmail] = useState("admin@fetraf.local");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  // Se já tem sessão, vai pro dashboard
  useEffect(() => {
    (async () => {
      try {
        const r = await fetch("/api/auth/me", { cache: "no-store" });
        if (r.ok) location.href = "/dashboard";
      } catch {}
    })();
  }, []);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    setLoading(true);
    try {
      const API = (process.env.NEXT_PUBLIC_API_URL || "").replace(/\/+$/, "");
      const url = API ? `${API}/auth/login` : "/api/auth/login";

      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include", // necessário se back usa cookie
        body: JSON.stringify({ email, password }),
      });

      const contentType = res.headers.get("content-type") || "";
      const text = await res.text();
      const data = contentType.includes("application/json") ? parseMaybeJson(text) : { raw: text };

      if (!res.ok || data?.ok === false) {
        const msg = data?.error || data?.message || data?.raw || `HTTP ${res.status}`;
        throw new Error(typeof msg === "string" ? msg : JSON.stringify(msg));
      }

      const next = new URLSearchParams(location.search).get("next") || "/dashboard";
      location.href = next;
    } catch (e:any) {
      setErr(e?.message || "Falha ao entrar (verifique a API e o CORS).");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-neutral-50 dark:bg-neutral-950 p-6">
      <form
        onSubmit={onSubmit}
        className="w-full max-w-md rounded-2xl border border-neutral-200 dark:border-neutral-800 bg-white dark:bg-neutral-900 p-8 shadow-sm text-neutral-900 dark:text-neutral-100"
        aria-labelledby="login-title"
      >
        <div className="text-center space-y-2 mb-6">
          <Brand className="mb-2" />
          <p className="text-xs text-neutral-500 dark:text-neutral-400">FETRAF</p>
          <h1 id="login-title" className="text-xl font-semibold">Sistema FETRAF</h1>
          <p className="text-sm text-neutral-500 dark:text-neutral-400">
            Federação dos Trabalhadores do Ramo Financeiro do RJ e ES
          </p>
        </div>

        <div className="space-y-4">
          <div>
            <label htmlFor="email" className="block text-sm mb-1">E-mail</label>
            <input
              id="email" type="email" value={email} onChange={(e)=>setEmail(e.target.value)}
              autoComplete="username" inputMode="email"
              className="w-full rounded-lg border border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-blue-600"
            />
          </div>
          <div>
            <label htmlFor="password" className="block text-sm mb-1">Senha</label>
            <input
              id="password" type="password" value={password} onChange={(e)=>setPassword(e.target.value)}
              autoComplete="current-password"
              className="w-full rounded-lg border border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-blue-600"
            />
          </div>
        </div>

        {err && (
          <div role="alert" className="mt-4 rounded-xl border border-rose-400/60 bg-rose-500/10 px-3 py-2 text-sm text-rose-600 dark:text-rose-300">
            {err}
          </div>
        )}

        <div className="mt-6 space-y-3">
          <button
            type="submit" disabled={loading}
            className="w-full rounded-lg bg-blue-600 hover:bg-blue-700 disabled:opacity-60 text-white font-medium px-4 py-2 text-sm transition"
          >
            {loading ? "Entrando..." : "Entrar"}
          </button>
          <div className="flex items-center justify-between text-sm">
            <span className="text-neutral-500 dark:text-neutral-400" />
            <Link href="/login/reset" className="text-sm underline underline-offset-4 hover:opacity-90">
              Esqueci minha senha
            </Link>
          </div>
        </div>

        <p className="mt-6 text-center text-xs text-neutral-500 dark:text-neutral-400">
          © {new Date().getFullYear()} FETRAF — Todos os direitos reservados
        </p>
      </form>
    </div>
  );
}

==== src/app/login/reset/page.tsx ====
"use client";

import Link from "next/link";
import { useState } from "react";

export default function ResetRequestPage() {
  const [email, setEmail] = useState("");
  const [loading, setLoading] = useState(false);
  const [ok, setOk] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    setOk(false);
    setLoading(true);
    try {
      const res = await fetch("/api/auth/reset/request", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });
      const raw = await res.text();
      let data: any = null;
      try { data = JSON.parse(raw); } catch { data = { raw }; }

      if (!res.ok || !data?.ok) {
        const msg = data?.error || data?.message || data?.raw || `HTTP ${res.status}`;
        throw new Error(typeof msg === "string" ? msg : JSON.stringify(msg));
      }

      setOk(true);
    } catch (e: any) {
      setErr(e.message);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-6">
      <div className="w-full max-w-md card p-8">
        {/* Topo */}
        <div className="text-center space-y-2 mb-6">
          <picture>
            <source srcSet="/logo-dark.svg" media="(prefers-color-scheme: dark)" />
            <img
              src="/logo-light.svg"
              alt="FETRAF"
              className="mx-auto h-10 w-auto"
              onError={(e) => ((e.currentTarget as HTMLImageElement).src = "/favicon.ico")}
            />
          </picture>
          <h1 className="text-xl font-semibold">Recuperar acesso</h1>
          <p className="text-sm text-neutral-500">
            Informe seu e-mail. Enviaremos um link para redefinir a senha.
          </p>
        </div>

        {/* Form */}
        {!ok ? (
          <form onSubmit={onSubmit} className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm mb-1">
                E-mail
              </label>
              <input
                id="email"
                className="input w-full"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                inputMode="email"
                autoComplete="email"
                required
              />
            </div>

            {err && (
              <div className="rounded-xl border border-rose-500/60 bg-rose-500/10 px-3 py-2 text-sm text-rose-300">
                {err}
              </div>
            )}

            <button disabled={loading} className="btn-brand w-full !text-white">
              {loading ? "Enviando..." : "Enviar link"}
            </button>

            <div className="text-center">
              <Link href="/login" className="text-sm underline underline-offset-4">
                Voltar ao login
              </Link>
            </div>
          </form>
        ) : (
          /* Sucesso */
          <div className="space-y-4 text-center">
            <div className="rounded-xl border border-emerald-500/40 bg-emerald-500/10 px-3 py-3 text-sm text-emerald-300">
              Se o e-mail existir, um link de redefiniÃ§Ã£o foi enviado.
              <br />
              (Em desenvolvimento, o link aparece no console do servidor.)
            </div>
            <Link href="/login" className="btn w-full">Ir para o login</Link>
          </div>
        )}

        <p className="mt-6 text-center text-xs text-neutral-500">
          Â© {new Date().getFullYear()} FETRAF â€” Todos os direitos reservados
        </p>
      </div>
    </div>
  );
}




==== src/app/login/reset/[token]/page.tsx ====
"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";

export default function ResetConfirmPage() {
  const { token } = useParams<{ token: string }>();
  const router = useRouter();

  const [password, setPassword] = useState("");
  const [confirm, setConfirm] = useState("");
  const [show, setShow] = useState(false);
  const [loading, setLoading] = useState(false);
  const [ok, setOk] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  // Validação simples
  const tooShort = password.length > 0 && password.length < 8;
  const mismatch = confirm.length > 0 && confirm !== password;

  useEffect(() => {
    if (!token) setErr("Token ausente.");
  }, [token]);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    if (!token) return;
    setErr(null);
    setOk(false);

    if (tooShort) return setErr("A senha deve ter no mínimo 8 caracteres.");
    if (mismatch) return setErr("As senhas não conferem.");

    setLoading(true);
    try {
      const res = await fetch("/api/auth/reset/confirm", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token, password }),
      });

      const raw = await res.text();
      let data: any = null;
      try { data = JSON.parse(raw); } catch { data = { raw }; }

      if (!res.ok || !data?.ok) {
        const msg = data?.error || data?.message || data?.raw || `HTTP ${res.status}`;
        throw new Error(typeof msg === "string" ? msg : JSON.stringify(msg));
      }

      setOk(true);
      // encaminha pro login depois de alguns segundos
      setTimeout(() => router.push("/login"), 1800);
    } catch (e: any) {
      setErr(e.message);
    } finally {
      setLoading(false);
    }
  }

  // Pequeno medidor de força (muito básico, só para feedback)
  const strength =
    (/\d/.test(password) ? 1 : 0) +
    (/[a-z]/.test(password) ? 1 : 0) +
    (/[A-Z]/.test(password) ? 1 : 0) +
    (/[^a-zA-Z0-9]/.test(password) ? 1 : 0) +
    (password.length >= 12 ? 1 : 0);
  const strengthLabel =
    strength <= 2 ? "fraca" : strength === 3 ? "média" : "forte";

  return (
    <div className="min-h-screen flex items-center justify-center p-6">
      <div className="w-full max-w-md card p-8">
        {/* Topo */}
        <div className="text-center space-y-2 mb-6">
          <picture>
            <source srcSet="/logo-dark.svg" media="(prefers-color-scheme: dark)" />
            <img
              src="/logo-light.svg"
              alt="FETRAF"
              className="mx-auto h-10 w-auto"
              onError={(e) => ((e.currentTarget as HTMLImageElement).src = "/favicon.ico")}
            />
          </picture>
          <h1 className="text-xl font-semibold">Definir nova senha</h1>
          <p className="text-sm text-neutral-500">Crie uma senha segura para sua conta.</p>
        </div>

        {!ok ? (
          <form onSubmit={onSubmit} className="space-y-4">
            <div>
              <label htmlFor="password" className="block text-sm mb-1">
                Nova senha
              </label>
              <div className="relative">
                <input
                  id="password"
                  type={show ? "text" : "password"}
                  className="input w-full pr-20"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  autoComplete="new-password"
                />
                <button
                  type="button"
                  onClick={() => setShow((v) => !v)}
                  className="absolute right-2 top-1/2 -translate-y-1/2 text-xs underline underline-offset-4"
                  aria-label={show ? "Ocultar senha" : "Mostrar senha"}
                >
                  {show ? "Ocultar" : "Mostrar"}
                </button>
              </div>
              {password && (
                <p className={`mt-1 text-xs ${tooShort ? "text-rose-400" : "text-neutral-500"}`}>
                  Força: <b className="capitalize">{strengthLabel}</b> • mínimo 8 caracteres
                </p>
              )}
            </div>

            <div>
              <label htmlFor="confirm" className="block text-sm mb-1">
                Confirmar senha
              </label>
              <input
                id="confirm"
                type="password"
                className="input w-full"
                value={confirm}
                onChange={(e) => setConfirm(e.target.value)}
                autoComplete="new-password"
              />
              {mismatch && (
                <p className="mt-1 text-xs text-rose-400">As senhas não conferem.</p>
              )}
            </div>

            {err && (
              <div className="rounded-xl border border-rose-500/60 bg-rose-500/10 px-3 py-2 text-sm text-rose-300">
                {err}
              </div>
            )}

            <button disabled={loading} className="btn-brand w-full !text-white">
              {loading ? "Salvando..." : "Salvar nova senha"}
            </button>

            <div className="text-center">
              <a href="/login" className="text-sm underline underline-offset-4">
                Voltar ao login
              </a>
            </div>
          </form>
        ) : (
          <div className="space-y-4 text-center">
            <div className="rounded-xl border border-emerald-500/40 bg-emerald-500/10 px-3 py-3 text-sm text-emerald-300">
              Senha atualizada com sucesso. Redirecionando para o login…
            </div>
            <a href="/login" className="btn w-full">Ir para o login</a>
          </div>
        )}

        <p className="mt-6 text-center text-xs text-neutral-500">
          © {new Date().getFullYear()} FETRAF — Todos os direitos reservados
        </p>
      </div>
    </div>
  );
}

