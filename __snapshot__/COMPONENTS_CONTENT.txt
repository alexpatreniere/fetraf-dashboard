==== src\components\Footer.tsx ====
export default function Footer() {
  const year = new Date().getFullYear();
  return (
    <footer className="w-full border-t mt-10">
      <div className="mx-auto max-w-7xl px-4 py-6 text-sm text-neutral-500 dark:text-neutral-400 flex flex-col sm:flex-row items-center justify-between gap-2">
        <span>© {year} FETRAF — Todos os direitos reservados.</span>
        <span className="opacity-80">
          Desenvolvido por <a className="underline hover:opacity-100" href="https://uptech.com.br" target="_blank" rel="noreferrer">UpTech</a>
        </span>
      </div>
    </footer>
  );
}

==== src\components\Brand.tsx ====
export default function Brand({ className = "" }: { className?: string }) {
  return (
    <div className={`flex items-center justify-center ${className}`}>
      <picture>
        <source srcSet="/logo-dark.svg" media="(prefers-color-scheme: dark)" />
        <img
          src="/logo-light.svg"
          alt="FETRAF"
          className="h-10 w-auto max-w-[180px] select-none"
          onError={(e) => { (e.currentTarget as HTMLImageElement).src = "/favicon.ico"; }}
        />
      </picture>
    </div>
  );
}

==== src\components\dashboard\ClientShell.tsx ====
"use client";

import { useEffect, useState, type ReactNode } from "react";
import Link from "next/link";
import Image from "next/image";
import { usePathname } from "next/navigation";
import type { LucideIcon } from "lucide-react";
import {
  Menu,
  Search,
  Users,
  Home,
  Landmark,
  FileText,
  Settings,
  LogOut,
  Bell,
  DollarSign,
} from "lucide-react";
import { ThemeToggle } from "@/components/ThemeToggle";

type IconType = LucideIcon;

function NavItem({
  href,
  icon: Icon,
  label,
}: {
  href: string;
  icon: IconType;
  label: string;
}) {
  const pathname = usePathname();
  const active = pathname === href || pathname.startsWith(href + "/");
  return (
    <li>
      <Link
        href={href}
        className={[
          "flex w-full items-center gap-3 rounded-xl px-3 py-2 text-sm transition",
          "hover:bg-[var(--surface-2)]",
          active ? "bg-[var(--surface-2)] font-medium" : "text-[var(--muted)]",
        ].join(" ")}
        aria-current={active ? "page" : undefined}
      >
        <Icon size={18} />
        <span>{label}</span>
      </Link>
    </li>
  );
}

export default function ClientShell({ children }: { children: ReactNode }) {
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [imgOk, setImgOk] = useState(true);

  // persistência do estado do sidebar
  useEffect(() => {
    try {
      const saved = localStorage.getItem("shell:sidebarOpen");
      if (saved !== null) setSidebarOpen(saved === "1");
    } catch {}
  }, []);
  useEffect(() => {
    try {
      localStorage.setItem("shell:sidebarOpen", sidebarOpen ? "1" : "0");
    } catch {}
  }, [sidebarOpen]);

  return (
    <div className="min-h-screen bg-[var(--app-bg)] text-[var(--fg)]">
      <div className="mx-auto grid max-w-[1400px] grid-cols-12 gap-4 p-4">
        {/* Sidebar */}
        <aside
          className={`col-span-12 md:col-span-3 lg:col-span-2 ${
            sidebarOpen ? "" : "hidden md:block"
          }`}
        >
          <div className="sticky top-4 flex h-[calc(100vh-2rem)] flex-col gap-4 rounded-2xl border border-[var(--border)] bg-[var(--surface)] p-4 shadow-soft">
            {/* topo com marca do produto (FETRAF) e botão */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                {imgOk ? (
                  <Image
                    src="/fetraf.png"       // marca institucional do sistema
                    alt="FETRAF"
                    width={28}
                    height={28}
                    className="rounded"
                    priority
                    unoptimized
                    onError={() => setImgOk(false)}
                  />
                ) : (
                  <Image src="/fetraf.png" alt="FETRAF" width={28} height={28} />
                )}
                <span className="text-sm font-semibold">FETRAF</span>
              </div>
              <button
                type="button"
                className="grid h-9 w-9 place-items-center rounded-xl hover:bg-[var(--surface-2)]"
                onClick={() => setSidebarOpen(!sidebarOpen)}
                aria-label="Alternar menu"
              >
                <Menu size={18} />
              </button>
            </div>

            {/* navegação */}
            <nav>
              <ul className="space-y-1">
                <NavItem href="/dashboard" icon={Home} label="Visão geral" />
                <NavItem href="/dashboard/filiados" icon={Users} label="Filiados" />
                <NavItem href="/dashboard/sindicatos" icon={Landmark} label="Sindicatos" />
                <NavItem href="/dashboard/contribuicoes" icon={DollarSign} label="Contribuições" />
                <NavItem href="/dashboard/relatorios" icon={FileText} label="Relatórios" />
                <NavItem href="/dashboard/configuracoes" icon={Settings} label="Configurações" />
              </ul>
            </nav>

            {/* rodapé da sidebar: usuário e tema (sem crédito de desenvolvedor aqui) */}
            <div className="mt-auto space-y-3">
              <div className="flex items-center justify-between rounded-xl border border-[var(--border)] px-3 py-2">
                <div className="flex items-center gap-2 text-sm">
                  <div className="grid h-8 w-8 place-items-center rounded-full bg-[color-mix(in_oklch,var(--fg),var(--surface)_80%)]/10 text-xs font-semibold">
                    AP
                  </div>
                  <div className="leading-tight">
                    <p className="text-sm">Alexandre</p>
                    <p className="text-xs text-[var(--muted)]">Admin • FETRAF</p>
                  </div>
                </div>
                <ThemeToggle />
              </div>

              <div className="flex gap-2">
                <Link href="/dashboard/configuracoes?tab=geral" className="btn flex-1">
                  Perfil
                </Link>
                <button
                  type="button"
                  className="btn"
                  aria-label="Sair"
                  onClick={async () => {
                    try {
                      await fetch("/api/auth/logout", { method: "POST" });
                    } catch {}
                    window.location.href = "/login";
                  }}
                >
                  <LogOut size={18} />
                </button>
              </div>
            </div>
          </div>
        </aside>

        {/* Main */}
        <main className="col-span-12 md:col-span-9 lg:col-span-10">
          {/* Topbar com busca/ações */}
          <div className="sticky top-4 z-10 mb-4 flex items-center gap-3 rounded-2xl border border-[var(--border)] bg-[var(--surface)] p-3 shadow-soft">
            <div className="relative w-full md:w-1/2">
              <Search
                className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2"
                size={18}
              />
              <input
                className="input pl-10"
                placeholder="Pesquisar por filiados, sindicatos, CPF..."
              />
            </div>

            <Link href="/dashboard/filiados/novo" className="btn-brand">
              Novo Filiado
            </Link>

            <button type="button" className="btn" aria-label="Notificações">
              <Bell size={18} />
            </button>
          </div>

          {children}
        </main>
      </div>
    </div>
  );
}


==== src\lib\api.ts ====
export async function apiFetch(input: RequestInfo | URL, init?: RequestInit) {
  const res = await fetch(input, { cache: "no-store", ...init });
  if (res.status === 401) {
    if (typeof window !== "undefined") window.location.href = "/login";
    throw new Error("Não autorizado");
  }
  return res;
}

// útil para páginas client-side
export function requireAuthClient() {
  if (typeof window === "undefined") return;
  const token = localStorage.getItem("token");
  if (!token) location.href = "/login";
}


==== src\lib\qs.ts ====
export function toQS(params: Record<string, any>) {
  const q = new URLSearchParams();
  Object.entries(params).forEach(([k, v]) => {
    if (v === undefined || v === null || v === "") return;
    q.set(k, String(v));
  });
  const s = q.toString();
  return s ? `?${s}` : "";
}


==== src\app\login\page.tsx ====
"use client";
import Brand from "@/components/Brand";
import Link from "next/link";
import { useEffect, useState } from "react";

function parseMaybeJson(t: string){ try{ return JSON.parse(t); }catch{ return { raw:t }; } }

export default function LoginPage() {
  const [email, setEmail] = useState("admin@fetraf.local");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  // Se já tem sessão, vai pro dashboard
  useEffect(() => {
    (async () => {
      try {
        const r = await fetch("/api/auth/me", { cache: "no-store" });
        if (r.ok) location.href = "/dashboard";
      } catch {}
    })();
  }, []);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    setLoading(true);
    try {
      const API = (process.env.NEXT_PUBLIC_API_URL || "").replace(/\/+$/, "");
      const url = API ? `${API}/auth/login` : "/api/auth/login";

      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include", // necessário se back usa cookie
        body: JSON.stringify({ email, password }),
      });

      const contentType = res.headers.get("content-type") || "";
      const text = await res.text();
      const data = contentType.includes("application/json") ? parseMaybeJson(text) : { raw: text };

      if (!res.ok || data?.ok === false) {
        const msg = data?.error || data?.message || data?.raw || `HTTP ${res.status}`;
        throw new Error(typeof msg === "string" ? msg : JSON.stringify(msg));
      }

      const next = new URLSearchParams(location.search).get("next") || "/dashboard";
      location.href = next;
    } catch (e:any) {
      setErr(e?.message || "Falha ao entrar (verifique a API e o CORS).");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-neutral-50 dark:bg-neutral-950 p-6">
      <form
        onSubmit={onSubmit}
        className="w-full max-w-md rounded-2xl border border-neutral-200 dark:border-neutral-800 bg-white dark:bg-neutral-900 p-8 shadow-sm text-neutral-900 dark:text-neutral-100"
        aria-labelledby="login-title"
      >
        <div className="text-center space-y-2 mb-6">
          <Brand className="mb-2" />
          <p className="text-xs text-neutral-500 dark:text-neutral-400">FETRAF</p>
          <h1 id="login-title" className="text-xl font-semibold">Sistema FETRAF</h1>
          <p className="text-sm text-neutral-500 dark:text-neutral-400">
            Federação dos Trabalhadores do Ramo Financeiro do RJ e ES
          </p>
        </div>

        <div className="space-y-4">
          <div>
            <label htmlFor="email" className="block text-sm mb-1">E-mail</label>
            <input
              id="email" type="email" value={email} onChange={(e)=>setEmail(e.target.value)}
              autoComplete="username" inputMode="email"
              className="w-full rounded-lg border border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-blue-600"
            />
          </div>
          <div>
            <label htmlFor="password" className="block text-sm mb-1">Senha</label>
            <input
              id="password" type="password" value={password} onChange={(e)=>setPassword(e.target.value)}
              autoComplete="current-password"
              className="w-full rounded-lg border border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-blue-600"
            />
          </div>
        </div>

        {err && (
          <div role="alert" className="mt-4 rounded-xl border border-rose-400/60 bg-rose-500/10 px-3 py-2 text-sm text-rose-600 dark:text-rose-300">
            {err}
          </div>
        )}

        <div className="mt-6 space-y-3">
          <button
            type="submit" disabled={loading}
            className="w-full rounded-lg bg-blue-600 hover:bg-blue-700 disabled:opacity-60 text-white font-medium px-4 py-2 text-sm transition"
          >
            {loading ? "Entrando..." : "Entrar"}
          </button>
          <div className="flex items-center justify-between text-sm">
            <span className="text-neutral-500 dark:text-neutral-400" />
            <Link href="/login/reset" className="text-sm underline underline-offset-4 hover:opacity-90">
              Esqueci minha senha
            </Link>
          </div>
        </div>

        <p className="mt-6 text-center text-xs text-neutral-500 dark:text-neutral-400">
          © {new Date().getFullYear()} FETRAF — Todos os direitos reservados
        </p>
      </form>
    </div>
  );
}

==== src\app\dashboard\layout.tsx ====
import type { ReactNode } from "react";
import ClientShell from "@/components/dashboard/ClientShell"; // client component permitido aqui

export default function Layout({ children }: { children: ReactNode }) {
  return <ClientShell>{children}</ClientShell>;
}

==== src\app\layout.tsx ====
import Footer from "@/components/Footer";
import type { Metadata } from "next";
import "./globals.css";

export const metadata: Metadata = {
  title: "Sistema FETRAF",
  description: "FederaÃ§Ã£o dos Trabalhadores do Ramo Financeiro do RJ e ES",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="pt-BR">
      <body className="font-sans antialiased bg-background text-foreground">
        {children}
      </body>
    </html>
  );
}

==== src\app\page.tsx ====
import { redirect } from "next/navigation";
export default function Home() {
  redirect("/login");
}

==== src\app\globals.css ====
@import "tailwindcss";
img, svg { max-width: 100%; height: auto; }


/* ===================== */
/* Paleta via CSS vars   */
/* ===================== */
:root {
  --brand: #2f6fed;
  --brand-foreground: #ffffff;

  --brand-50: #eef3ff;
  --brand-100: #dfe9ff;
  --brand-200: #bcd0ff;
  --brand-300: #92b2ff;
  --brand-400: #6f97fa;
  --brand-500: #2f6fed;
  --brand-600: #2254c3;
  --brand-700: #1b439d;
  --brand-800: #17397f;
  --brand-900: #122c60;

  --canvas: #ffffff;
  --surface: #f9f9fb;
  --surface-2: #f1f1f4;
  --surface-3: #e8e8ed;
  --fg: #1a1a1a;
  --muted: #6b7280;
  --border: #d4d4d8;

  --danger: #ef4444;
  --success: #22c55e;
  --warning: #f59e0b;
}

.dark {
  --brand: #5c85ff;
  --brand-foreground: #0b1020;

  --canvas: #0b0f19;
  --surface: #111827;
  --surface-2: #1f2937;
  --surface-3: #2d3748;
  --fg: #f3f4f6;
  --muted: #9ca3af;
  --border: #374151;

  --danger: #f87171;
  --success: #4ade80;
  --warning: #fbbf24;
}

/* ===================== */
/* Base                  */
/* ===================== */
@layer base {
  html {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  body {
    background-color: var(--canvas);
    color: var(--fg);
  }
}

/* ===================== */
/* Utilitárias           */
/* ===================== */
@layer components {
  .card {
    @apply rounded-2xl border p-4 shadow-sm;
    background-color: var(--surface);
    border-color: var(--border);
    color: var(--fg);
  }

  .btn {
    @apply inline-flex items-center justify-center gap-2 rounded-xl border px-3 py-2 text-sm font-medium transition;
    background-color: var(--surface);
    border-color: var(--border);
    color: var(--fg);
  }

  .btn:hover {
    background-color: color-mix(in oklch, var(--surface), black 6%);
  }

  .btn:disabled {
    @apply opacity-50 cursor-not-allowed;
  }

  .btn-brand {
    @apply inline-flex items-center justify-center gap-2 rounded-xl px-3 py-2 text-sm font-medium transition;
    background-color: var(--brand);
    color: #fff !important;
    border: 1px solid color-mix(in oklch, var(--brand), black 12%);
  }

  .btn-brand:hover {
    background-color: color-mix(in oklch, var(--brand), black 12%);
  }

  .btn-brand:disabled {
    @apply opacity-50 cursor-not-allowed;
  }

  .input {
    @apply w-full rounded-xl border px-3 py-2 text-sm outline-none;
    background-color: var(--canvas); /* corrigido */
    border-color: var(--border);
    color: var(--fg);
  }

  .input::placeholder {
    color: var(--muted);
  }

  .input:focus {
    /* anel de foco discreto que funciona nos dois temas */
    box-shadow: 0 0 0 3px color-mix(in oklch, var(--brand), transparent 82%);
    border-color: color-mix(in oklch, var(--brand), var(--border) 65%);
  }

  .chip {
    @apply rounded-xl border px-2 py-1 text-xs;
    background-color: color-mix(in oklch, var(--surface), white 0%);
    border-color: var(--border);
    color: var(--fg);
  }

  .muted {
    color: var(--muted);
  }

  .tab {
    @apply rounded-xl border px-3 py-1.5 text-sm font-medium transition;
    background-color: var(--surface);
    border-color: var(--border);
    color: var(--muted);
  }

  .tab-active {
    background-color: var(--brand);
    border-color: var(--brand);
    color: var(--brand-foreground);
  }
}

